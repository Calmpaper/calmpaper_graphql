generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource sqlite {
  provider = ["sqlite", "postgres"]
  url      = env("DB_URL")
}


model User {
  id             Int         @default(autoincrement()) @id
  username       String?     @unique
  firstname      String?
  givenname      String?
  fullname       String?
  bio            String?
  email          String?    @unique
  bio            String?
  avatar         String?
  password       String?
  books          Book[]     @relation("UserBookAuthor")
  favoriteBooks  Book[]     @relation("UserBookReader")
  chapters       Chapter[]
  reviews        Review[]
  likes          Like[]
  comments       Comment[]
  following      User[]     @relation("UserFollowers", references: [id])
  followers      User[]     @relation("UserFollowers", references: [id])

  inviterId      Int?
  inviter        User?      @relation("UserInvited", references: [id], fields: [inviterId])
  invited        User[]     @relation("UserInvited")

  googleId       String?     @unique
  getStreamToken String?     @unique
  stripeId       String?     @unique

  receivedDonations Donation[]  @relation("DonationReceiver")
  sentDonations     Donation[]  @relation("DonationPayer")
}

model Book {
  id             Int        @default(autoincrement()) @id
  name           String
  description    String
  image          String?
  archived       Boolean?   @default(false)
  createdAt      DateTime   @default(now())
  author         User?      @relation("UserBookAuthor", fields: [authorId], references: [id])
  authorId       Int?
  readers        User[]     @relation("UserBookReader")
  chapters       Chapter[]
  tags           Tag[]      @relation(references: [id])
  genres         Genre[]    @relation(references: [id])
  likes          Like[]
  views          Int        @default(0)
  reviews        Review[]
  comments       Comment[]
  donations      Donation[]
}

model Chapter {
  id             Int        @default(autoincrement()) @id
  title          String?
  content        String
  image          String?
  createdAt      DateTime   @default(now())
  author         User?      @relation(fields: [authorId], references: [id])
  authorId       Int?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  likes          Like[]
  views          Int        @default(0)
  reviews        Review[]
  comments       Comment[]
  donations      Donation[]
}

model Tag {
  id             Int        @default(autoincrement()) @id
  label          String
  books          Book[]     @relation(references: [id])
}

model Genre {
  id             Int        @default(autoincrement()) @id
  label          String
  books          Book[]     @relation(references: [id])
}

model Comment {
  id             Int        @default(autoincrement()) @id
  body           String
  createdAt      DateTime   @default(now())
  author         User?      @relation(fields: [authorId], references: [id])
  authorId       Int?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId      Int?
  likes          Like[]
  replies        Comment[]  @relation("CommentReplies")
  parentId       Int?
  parent         Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  isChild        Boolean    @default(false)
}

model Review {
  id             Int        @default(autoincrement()) @id
  stars          Int
  message        String?
  createdAt      DateTime   @default(now())
  author         User?      @relation(fields: [authorId], references: [id])
  authorId       Int?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId      Int?
  likes          Like[]
}

model Like {
  id             Int        @default(autoincrement()) @id
  createdAt      DateTime   @default(now())
  author         User?      @relation(fields: [authorId], references: [id])
  authorId       Int?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId      Int?
  comment        Comment?   @relation(fields: [commentId], references: [id])
  commentId      Int?
  review         Review?    @relation(fields: [reviewId], references: [id])
  reviewId       Int?
}

model Donation {
  id             Int        @default(autoincrement()) @id
  amount         Int
  currency       String
  message        String?
  paymentId      String
  paymentRequestSecret String?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId      Int?
  createdAt      DateTime   @default(now())

  payerId        Int?
  payer          User?      @relation("DonationPayer", fields: [payerId], references: [id])
  recipientId    Int?
  recipient      User?      @relation("DonationReceiver", fields: [recipientId], references: [id])
}
