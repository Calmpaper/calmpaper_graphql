generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://wzuflgpoeieulz:298ce98959a43d5d531f61be338c8f4df5ed1191b99b339130120eae6e14e9c2@ec2-3-229-210-93.compute-1.amazonaws.com:5432/d3m8dkmbvffsnd"
}


model User {
  id             Int        @default(autoincrement()) @id
  username       String     @unique
  email          String?    @unique
  avatar         String?
  books          Book[]
  chapters       Chapter[]
  voices         Voice[]
  ratings        Rating[]   @relation("RatingAuthor")
  settedRetings  Rating[]   @relation("RatingTarget")
}

model Book {
  id             Int        @default(autoincrement()) @id
  name           String
  description    String
  image          String?

  author         User?      @relation(fields: [authorUsername], references: [username])
  authorUsername String?
  chapters       Chapter[]
  voices         Voice[]
  ratings        Rating[]
}

model Chapter {
  id             Int        @default(autoincrement()) @id
  title          String?
  content        String
  image          String?

  author         User?      @relation(fields: [authorUsername], references: [username])
  authorUsername String?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  voices         Voice[]
  ratings        Rating[]
}

model Voice {
  id             Int        @default(autoincrement()) @id
  url            String

  author         User?      @relation(fields: [authorUsername], references: [username])
  authorUsername String?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId      Int?
  ratings        Rating[]
}

model Rating {
  id             Int        @default(autoincrement()) @id
  stars          Int

  author         User?      @relation(name: "RatingAuthor", fields: [authorUsername], references: [username])
  authorUsername String?
  user           User?      @relation(name: "RatingTarget", fields: [userUsername], references: [username])
  userUsername   String?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId      Int?
  voice          Voice?     @relation(fields: [voiceId], references: [id])
  voiceId        Int?
}
