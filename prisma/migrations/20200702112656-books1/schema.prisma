generator client {
  provider = "prisma-client-js"
}

datasource sqlite {
  provider = "sqlite"
  url = "***"
}


model User {
  id             Int        @default(autoincrement()) @id
  username       String     @unique
  email          String?    @unique
  avatar         String?
  books          Book[]
  chapters       Chapter[]
  reviews        Review[]
  likes          Like[]
  comments       Comment[]
  following      User[]     @relation("UserFollowers", references: [id])
  followers      User[]     @relation("UserFollowers", references: [id])
}

model Book {
  id             Int        @default(autoincrement()) @id
  name           String
  description    String
  image          String?
  views          Int        @default(0)
  author         User?      @relation(fields: [authorUsername], references: [username])
  authorUsername String?
  chapters       Chapter[]
  tags           Tag[]      @relation(references: [id])
  reviews        Review[]
  likes          Like[]
  comments       Comment[]
}

model Chapter {
  id             Int        @default(autoincrement()) @id
  title          String?
  content        String
  image          String?
  views          Int        @default(0)
  author         User?      @relation(fields: [authorUsername], references: [username])
  authorUsername String?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  tags           Tag[]      @relation(references: [id])
  reviews        Review[]
  likes          Like[]
  comments       Comment[]
}

model Tag {
  id             Int        @default(autoincrement()) @id
  label          String
  books          Book[]     @relation(references: [id])
  chapters       Chapter[]  @relation(references: [id])
}

model Comment {
  id             Int        @default(autoincrement()) @id
  body           String
  author         User?      @relation(fields: [authorUsername], references: [username])
  authorUsername String?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId      Int?
  likes          Like[]
}

model Review {
  id             Int        @default(autoincrement()) @id
  stars          Int
  message        String?
  author         User?      @relation(fields: [authorUsername], references: [username])
  authorUsername String?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId      Int?
  likes          Like[]
}

model Like {
  id             Int        @default(autoincrement()) @id
  author         User?      @relation(fields: [authorUsername], references: [username])
  authorUsername String?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId      Int?
  comment        Comment?   @relation(fields: [commentId], references: [id])
  commentId      Int?
  review         Review?    @relation(fields: [reviewId], references: [id])
  reviewId       Int?
}


model Notification {
  id             Int        @default(autoincrement()) @id
  body           String
  author         User?      @relation(fields: [authorUsername], references: [username])
  authorUsername String?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId      Int?
  review         Comment?   @relation(fields: [reviewId], references: [id])
  reviewId       Int?
}
