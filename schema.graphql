### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Book {
  author: User
  chapters: [Chapter!]!
  description: String!
  id: Int!
  name: String!
  ratings: [Rating!]!
  voices: [Voice!]!
}

input BookCreateInput {
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  description: String!
  image: String
  name: String!
  ratings: RatingCreateManyWithoutBookInput
  voices: VoiceCreateManyWithoutBookInput
}

input BookCreateManyWithoutAuthorInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutAuthorInput!]
}

input BookCreateOneWithoutChaptersInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutChaptersInput
}

input BookCreateOneWithoutRatingsInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutRatingsInput
}

input BookCreateOneWithoutVoicesInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutVoicesInput
}

input BookCreateWithoutAuthorInput {
  chapters: ChapterCreateManyWithoutBookInput
  description: String!
  image: String
  name: String!
  ratings: RatingCreateManyWithoutBookInput
  voices: VoiceCreateManyWithoutBookInput
}

input BookCreateWithoutChaptersInput {
  author: UserCreateOneWithoutBooksInput
  description: String!
  image: String
  name: String!
  ratings: RatingCreateManyWithoutBookInput
  voices: VoiceCreateManyWithoutBookInput
}

input BookCreateWithoutRatingsInput {
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  description: String!
  image: String
  name: String!
  voices: VoiceCreateManyWithoutBookInput
}

input BookCreateWithoutVoicesInput {
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  description: String!
  image: String
  name: String!
  ratings: RatingCreateManyWithoutBookInput
}

input BookFilter {
  every: BookWhereInput
  none: BookWhereInput
  some: BookWhereInput
}

input BookScalarWhereInput {
  AND: [BookScalarWhereInput!]
  authorUsername: NullableStringFilter
  chapters: ChapterFilter
  description: StringFilter
  id: IntFilter
  image: NullableStringFilter
  name: StringFilter
  NOT: [BookScalarWhereInput!]
  OR: [BookScalarWhereInput!]
  ratings: RatingFilter
  voices: VoiceFilter
}

input BookUpdateInput {
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  description: String
  id: Int
  image: String
  name: String
  ratings: RatingUpdateManyWithoutBookInput
  voices: VoiceUpdateManyWithoutBookInput
}

input BookUpdateManyDataInput {
  description: String
  id: Int
  image: String
  name: String
}

input BookUpdateManyWithoutAuthorInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutAuthorInput!]
  delete: [BookWhereUniqueInput!]
  deleteMany: [BookScalarWhereInput!]
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutAuthorInput!]
}

input BookUpdateManyWithWhereNestedInput {
  data: BookUpdateManyDataInput!
  where: BookScalarWhereInput!
}

input BookUpdateOneWithoutChaptersInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutChaptersInput
  delete: Boolean
  disconnect: Boolean
  update: BookUpdateWithoutChaptersDataInput
  upsert: BookUpsertWithoutChaptersInput
}

input BookUpdateOneWithoutRatingsInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutRatingsInput
  delete: Boolean
  disconnect: Boolean
  update: BookUpdateWithoutRatingsDataInput
  upsert: BookUpsertWithoutRatingsInput
}

input BookUpdateOneWithoutVoicesInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutVoicesInput
  delete: Boolean
  disconnect: Boolean
  update: BookUpdateWithoutVoicesDataInput
  upsert: BookUpsertWithoutVoicesInput
}

input BookUpdateWithoutAuthorDataInput {
  chapters: ChapterUpdateManyWithoutBookInput
  description: String
  id: Int
  image: String
  name: String
  ratings: RatingUpdateManyWithoutBookInput
  voices: VoiceUpdateManyWithoutBookInput
}

input BookUpdateWithoutChaptersDataInput {
  author: UserUpdateOneWithoutBooksInput
  description: String
  id: Int
  image: String
  name: String
  ratings: RatingUpdateManyWithoutBookInput
  voices: VoiceUpdateManyWithoutBookInput
}

input BookUpdateWithoutRatingsDataInput {
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  description: String
  id: Int
  image: String
  name: String
  voices: VoiceUpdateManyWithoutBookInput
}

input BookUpdateWithoutVoicesDataInput {
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  description: String
  id: Int
  image: String
  name: String
  ratings: RatingUpdateManyWithoutBookInput
}

input BookUpdateWithWhereUniqueWithoutAuthorInput {
  data: BookUpdateWithoutAuthorDataInput!
  where: BookWhereUniqueInput!
}

input BookUpsertWithoutChaptersInput {
  create: BookCreateWithoutChaptersInput!
  update: BookUpdateWithoutChaptersDataInput!
}

input BookUpsertWithoutRatingsInput {
  create: BookCreateWithoutRatingsInput!
  update: BookUpdateWithoutRatingsDataInput!
}

input BookUpsertWithoutVoicesInput {
  create: BookCreateWithoutVoicesInput!
  update: BookUpdateWithoutVoicesDataInput!
}

input BookUpsertWithWhereUniqueWithoutAuthorInput {
  create: BookCreateWithoutAuthorInput!
  update: BookUpdateWithoutAuthorDataInput!
  where: BookWhereUniqueInput!
}

input BookWhereInput {
  AND: [BookWhereInput!]
  author: UserWhereInput
  authorUsername: NullableStringFilter
  chapters: ChapterFilter
  description: StringFilter
  id: IntFilter
  image: NullableStringFilter
  name: StringFilter
  NOT: [BookWhereInput!]
  OR: [BookWhereInput!]
  ratings: RatingFilter
  voices: VoiceFilter
}

input BookWhereUniqueInput {
  id: Int
}

type Chapter {
  author: User
  book: Book
  content: String!
  id: Int!
  image: String
  ratings: [Rating!]!
  title: String
  voices: [Voice!]!
}

input ChapterCreateInput {
  author: UserCreateOneWithoutChaptersInput
  book: BookCreateOneWithoutChaptersInput
  content: String!
  image: String
  ratings: RatingCreateManyWithoutChapterInput
  title: String
  voices: VoiceCreateManyWithoutChapterInput
}

input ChapterCreateManyWithoutAuthorInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutAuthorInput!]
}

input ChapterCreateManyWithoutBookInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutBookInput!]
}

input ChapterCreateOneWithoutRatingsInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutRatingsInput
}

input ChapterCreateOneWithoutVoicesInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutVoicesInput
}

input ChapterCreateWithoutAuthorInput {
  book: BookCreateOneWithoutChaptersInput
  content: String!
  image: String
  ratings: RatingCreateManyWithoutChapterInput
  title: String
  voices: VoiceCreateManyWithoutChapterInput
}

input ChapterCreateWithoutBookInput {
  author: UserCreateOneWithoutChaptersInput
  content: String!
  image: String
  ratings: RatingCreateManyWithoutChapterInput
  title: String
  voices: VoiceCreateManyWithoutChapterInput
}

input ChapterCreateWithoutRatingsInput {
  author: UserCreateOneWithoutChaptersInput
  book: BookCreateOneWithoutChaptersInput
  content: String!
  image: String
  title: String
  voices: VoiceCreateManyWithoutChapterInput
}

input ChapterCreateWithoutVoicesInput {
  author: UserCreateOneWithoutChaptersInput
  book: BookCreateOneWithoutChaptersInput
  content: String!
  image: String
  ratings: RatingCreateManyWithoutChapterInput
  title: String
}

input ChapterFilter {
  every: ChapterWhereInput
  none: ChapterWhereInput
  some: ChapterWhereInput
}

input ChapterScalarWhereInput {
  AND: [ChapterScalarWhereInput!]
  authorUsername: NullableStringFilter
  bookId: NullableIntFilter
  content: StringFilter
  id: IntFilter
  image: NullableStringFilter
  NOT: [ChapterScalarWhereInput!]
  OR: [ChapterScalarWhereInput!]
  ratings: RatingFilter
  title: NullableStringFilter
  voices: VoiceFilter
}

input ChapterUpdateInput {
  author: UserUpdateOneWithoutChaptersInput
  book: BookUpdateOneWithoutChaptersInput
  content: String
  id: Int
  image: String
  ratings: RatingUpdateManyWithoutChapterInput
  title: String
  voices: VoiceUpdateManyWithoutChapterInput
}

input ChapterUpdateManyDataInput {
  content: String
  id: Int
  image: String
  title: String
}

input ChapterUpdateManyWithoutAuthorInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutAuthorInput!]
  delete: [ChapterWhereUniqueInput!]
  deleteMany: [ChapterScalarWhereInput!]
  disconnect: [ChapterWhereUniqueInput!]
  set: [ChapterWhereUniqueInput!]
  update: [ChapterUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ChapterUpdateManyWithWhereNestedInput!]
  upsert: [ChapterUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ChapterUpdateManyWithoutBookInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutBookInput!]
  delete: [ChapterWhereUniqueInput!]
  deleteMany: [ChapterScalarWhereInput!]
  disconnect: [ChapterWhereUniqueInput!]
  set: [ChapterWhereUniqueInput!]
  update: [ChapterUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [ChapterUpdateManyWithWhereNestedInput!]
  upsert: [ChapterUpsertWithWhereUniqueWithoutBookInput!]
}

input ChapterUpdateManyWithWhereNestedInput {
  data: ChapterUpdateManyDataInput!
  where: ChapterScalarWhereInput!
}

input ChapterUpdateOneWithoutRatingsInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutRatingsInput
  delete: Boolean
  disconnect: Boolean
  update: ChapterUpdateWithoutRatingsDataInput
  upsert: ChapterUpsertWithoutRatingsInput
}

input ChapterUpdateOneWithoutVoicesInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutVoicesInput
  delete: Boolean
  disconnect: Boolean
  update: ChapterUpdateWithoutVoicesDataInput
  upsert: ChapterUpsertWithoutVoicesInput
}

input ChapterUpdateWithoutAuthorDataInput {
  book: BookUpdateOneWithoutChaptersInput
  content: String
  id: Int
  image: String
  ratings: RatingUpdateManyWithoutChapterInput
  title: String
  voices: VoiceUpdateManyWithoutChapterInput
}

input ChapterUpdateWithoutBookDataInput {
  author: UserUpdateOneWithoutChaptersInput
  content: String
  id: Int
  image: String
  ratings: RatingUpdateManyWithoutChapterInput
  title: String
  voices: VoiceUpdateManyWithoutChapterInput
}

input ChapterUpdateWithoutRatingsDataInput {
  author: UserUpdateOneWithoutChaptersInput
  book: BookUpdateOneWithoutChaptersInput
  content: String
  id: Int
  image: String
  title: String
  voices: VoiceUpdateManyWithoutChapterInput
}

input ChapterUpdateWithoutVoicesDataInput {
  author: UserUpdateOneWithoutChaptersInput
  book: BookUpdateOneWithoutChaptersInput
  content: String
  id: Int
  image: String
  ratings: RatingUpdateManyWithoutChapterInput
  title: String
}

input ChapterUpdateWithWhereUniqueWithoutAuthorInput {
  data: ChapterUpdateWithoutAuthorDataInput!
  where: ChapterWhereUniqueInput!
}

input ChapterUpdateWithWhereUniqueWithoutBookInput {
  data: ChapterUpdateWithoutBookDataInput!
  where: ChapterWhereUniqueInput!
}

input ChapterUpsertWithoutRatingsInput {
  create: ChapterCreateWithoutRatingsInput!
  update: ChapterUpdateWithoutRatingsDataInput!
}

input ChapterUpsertWithoutVoicesInput {
  create: ChapterCreateWithoutVoicesInput!
  update: ChapterUpdateWithoutVoicesDataInput!
}

input ChapterUpsertWithWhereUniqueWithoutAuthorInput {
  create: ChapterCreateWithoutAuthorInput!
  update: ChapterUpdateWithoutAuthorDataInput!
  where: ChapterWhereUniqueInput!
}

input ChapterUpsertWithWhereUniqueWithoutBookInput {
  create: ChapterCreateWithoutBookInput!
  update: ChapterUpdateWithoutBookDataInput!
  where: ChapterWhereUniqueInput!
}

input ChapterWhereInput {
  AND: [ChapterWhereInput!]
  author: UserWhereInput
  authorUsername: NullableStringFilter
  book: BookWhereInput
  bookId: NullableIntFilter
  content: StringFilter
  id: IntFilter
  image: NullableStringFilter
  NOT: [ChapterWhereInput!]
  OR: [ChapterWhereInput!]
  ratings: RatingFilter
  title: NullableStringFilter
  voices: VoiceFilter
}

input ChapterWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneBook(data: BookCreateInput!): Book!
  createOneChapter(data: ChapterCreateInput!): Chapter!
  createOneRating(data: RatingCreateInput!): Rating!
  createOneUser(data: UserCreateInput!): User!
  createOneVoice(data: VoiceCreateInput!): Voice!
  deleteOneBook(where: BookWhereUniqueInput!): Book
  deleteOneChapter(where: ChapterWhereUniqueInput!): Chapter
  deleteOneRating(where: RatingWhereUniqueInput!): Rating
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteOneVoice(where: VoiceWhereUniqueInput!): Voice
  updateOneBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateOneChapter(data: ChapterUpdateInput!, where: ChapterWhereUniqueInput!): Chapter
  updateOneRating(data: RatingUpdateInput!, where: RatingWhereUniqueInput!): Rating
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneVoice(data: VoiceUpdateInput!, where: VoiceWhereUniqueInput!): Voice
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  book(where: BookWhereUniqueInput!): Book
  books(skip: Int): [Book!]!
  chapter(where: ChapterWhereUniqueInput!): Chapter
  chapters(skip: Int): [Chapter!]!
  rating(where: RatingWhereUniqueInput!): Rating
  ratings(skip: Int): [Rating!]!
  user(where: UserWhereUniqueInput!): User
  users(skip: Int): [User!]!
  voice(where: VoiceWhereUniqueInput!): Voice
  voices(skip: Int): [Voice!]!
}

type Rating {
  author: User
  book: Book
  chapter: Chapter
  id: Int!
  stars: Int!
  voice: Voice
}

input RatingCreateInput {
  author: UserCreateOneWithoutRatingsInput
  book: BookCreateOneWithoutRatingsInput
  chapter: ChapterCreateOneWithoutRatingsInput
  stars: Int!
  voice: VoiceCreateOneWithoutRatingsInput
}

input RatingCreateManyWithoutAuthorInput {
  connect: [RatingWhereUniqueInput!]
  create: [RatingCreateWithoutAuthorInput!]
}

input RatingCreateManyWithoutBookInput {
  connect: [RatingWhereUniqueInput!]
  create: [RatingCreateWithoutBookInput!]
}

input RatingCreateManyWithoutChapterInput {
  connect: [RatingWhereUniqueInput!]
  create: [RatingCreateWithoutChapterInput!]
}

input RatingCreateManyWithoutVoiceInput {
  connect: [RatingWhereUniqueInput!]
  create: [RatingCreateWithoutVoiceInput!]
}

input RatingCreateWithoutAuthorInput {
  book: BookCreateOneWithoutRatingsInput
  chapter: ChapterCreateOneWithoutRatingsInput
  stars: Int!
  voice: VoiceCreateOneWithoutRatingsInput
}

input RatingCreateWithoutBookInput {
  author: UserCreateOneWithoutRatingsInput
  chapter: ChapterCreateOneWithoutRatingsInput
  stars: Int!
  voice: VoiceCreateOneWithoutRatingsInput
}

input RatingCreateWithoutChapterInput {
  author: UserCreateOneWithoutRatingsInput
  book: BookCreateOneWithoutRatingsInput
  stars: Int!
  voice: VoiceCreateOneWithoutRatingsInput
}

input RatingCreateWithoutVoiceInput {
  author: UserCreateOneWithoutRatingsInput
  book: BookCreateOneWithoutRatingsInput
  chapter: ChapterCreateOneWithoutRatingsInput
  stars: Int!
}

input RatingFilter {
  every: RatingWhereInput
  none: RatingWhereInput
  some: RatingWhereInput
}

input RatingScalarWhereInput {
  AND: [RatingScalarWhereInput!]
  authorUsername: NullableStringFilter
  bookId: NullableIntFilter
  chapterId: NullableIntFilter
  id: IntFilter
  NOT: [RatingScalarWhereInput!]
  OR: [RatingScalarWhereInput!]
  stars: IntFilter
  voiceId: NullableIntFilter
}

input RatingUpdateInput {
  author: UserUpdateOneWithoutRatingsInput
  book: BookUpdateOneWithoutRatingsInput
  chapter: ChapterUpdateOneWithoutRatingsInput
  id: Int
  stars: Int
  voice: VoiceUpdateOneWithoutRatingsInput
}

input RatingUpdateManyDataInput {
  id: Int
  stars: Int
}

input RatingUpdateManyWithoutAuthorInput {
  connect: [RatingWhereUniqueInput!]
  create: [RatingCreateWithoutAuthorInput!]
  delete: [RatingWhereUniqueInput!]
  deleteMany: [RatingScalarWhereInput!]
  disconnect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [RatingUpdateManyWithWhereNestedInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutAuthorInput!]
}

input RatingUpdateManyWithoutBookInput {
  connect: [RatingWhereUniqueInput!]
  create: [RatingCreateWithoutBookInput!]
  delete: [RatingWhereUniqueInput!]
  deleteMany: [RatingScalarWhereInput!]
  disconnect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [RatingUpdateManyWithWhereNestedInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutBookInput!]
}

input RatingUpdateManyWithoutChapterInput {
  connect: [RatingWhereUniqueInput!]
  create: [RatingCreateWithoutChapterInput!]
  delete: [RatingWhereUniqueInput!]
  deleteMany: [RatingScalarWhereInput!]
  disconnect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutChapterInput!]
  updateMany: [RatingUpdateManyWithWhereNestedInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutChapterInput!]
}

input RatingUpdateManyWithoutVoiceInput {
  connect: [RatingWhereUniqueInput!]
  create: [RatingCreateWithoutVoiceInput!]
  delete: [RatingWhereUniqueInput!]
  deleteMany: [RatingScalarWhereInput!]
  disconnect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutVoiceInput!]
  updateMany: [RatingUpdateManyWithWhereNestedInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutVoiceInput!]
}

input RatingUpdateManyWithWhereNestedInput {
  data: RatingUpdateManyDataInput!
  where: RatingScalarWhereInput!
}

input RatingUpdateWithoutAuthorDataInput {
  book: BookUpdateOneWithoutRatingsInput
  chapter: ChapterUpdateOneWithoutRatingsInput
  id: Int
  stars: Int
  voice: VoiceUpdateOneWithoutRatingsInput
}

input RatingUpdateWithoutBookDataInput {
  author: UserUpdateOneWithoutRatingsInput
  chapter: ChapterUpdateOneWithoutRatingsInput
  id: Int
  stars: Int
  voice: VoiceUpdateOneWithoutRatingsInput
}

input RatingUpdateWithoutChapterDataInput {
  author: UserUpdateOneWithoutRatingsInput
  book: BookUpdateOneWithoutRatingsInput
  id: Int
  stars: Int
  voice: VoiceUpdateOneWithoutRatingsInput
}

input RatingUpdateWithoutVoiceDataInput {
  author: UserUpdateOneWithoutRatingsInput
  book: BookUpdateOneWithoutRatingsInput
  chapter: ChapterUpdateOneWithoutRatingsInput
  id: Int
  stars: Int
}

input RatingUpdateWithWhereUniqueWithoutAuthorInput {
  data: RatingUpdateWithoutAuthorDataInput!
  where: RatingWhereUniqueInput!
}

input RatingUpdateWithWhereUniqueWithoutBookInput {
  data: RatingUpdateWithoutBookDataInput!
  where: RatingWhereUniqueInput!
}

input RatingUpdateWithWhereUniqueWithoutChapterInput {
  data: RatingUpdateWithoutChapterDataInput!
  where: RatingWhereUniqueInput!
}

input RatingUpdateWithWhereUniqueWithoutVoiceInput {
  data: RatingUpdateWithoutVoiceDataInput!
  where: RatingWhereUniqueInput!
}

input RatingUpsertWithWhereUniqueWithoutAuthorInput {
  create: RatingCreateWithoutAuthorInput!
  update: RatingUpdateWithoutAuthorDataInput!
  where: RatingWhereUniqueInput!
}

input RatingUpsertWithWhereUniqueWithoutBookInput {
  create: RatingCreateWithoutBookInput!
  update: RatingUpdateWithoutBookDataInput!
  where: RatingWhereUniqueInput!
}

input RatingUpsertWithWhereUniqueWithoutChapterInput {
  create: RatingCreateWithoutChapterInput!
  update: RatingUpdateWithoutChapterDataInput!
  where: RatingWhereUniqueInput!
}

input RatingUpsertWithWhereUniqueWithoutVoiceInput {
  create: RatingCreateWithoutVoiceInput!
  update: RatingUpdateWithoutVoiceDataInput!
  where: RatingWhereUniqueInput!
}

input RatingWhereInput {
  AND: [RatingWhereInput!]
  author: UserWhereInput
  authorUsername: NullableStringFilter
  book: BookWhereInput
  bookId: NullableIntFilter
  chapter: ChapterWhereInput
  chapterId: NullableIntFilter
  id: IntFilter
  NOT: [RatingWhereInput!]
  OR: [RatingWhereInput!]
  stars: IntFilter
  voice: VoiceWhereInput
  voiceId: NullableIntFilter
}

input RatingWhereUniqueInput {
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  avatar: String
  books: [Book!]!
  chapters: [Chapter!]!
  email: String!
  id: Int!
  ratings: [Rating!]!
  username: String!
  voices: [Voice!]!
}

input UserCreateInput {
  avatar: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  email: String!
  ratings: RatingCreateManyWithoutAuthorInput
  username: String!
  voices: VoiceCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutBooksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutBooksInput
}

input UserCreateOneWithoutChaptersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChaptersInput
}

input UserCreateOneWithoutRatingsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRatingsInput
}

input UserCreateOneWithoutVoicesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutVoicesInput
}

input UserCreateWithoutBooksInput {
  avatar: String
  chapters: ChapterCreateManyWithoutAuthorInput
  email: String!
  ratings: RatingCreateManyWithoutAuthorInput
  username: String!
  voices: VoiceCreateManyWithoutAuthorInput
}

input UserCreateWithoutChaptersInput {
  avatar: String
  books: BookCreateManyWithoutAuthorInput
  email: String!
  ratings: RatingCreateManyWithoutAuthorInput
  username: String!
  voices: VoiceCreateManyWithoutAuthorInput
}

input UserCreateWithoutRatingsInput {
  avatar: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  email: String!
  username: String!
  voices: VoiceCreateManyWithoutAuthorInput
}

input UserCreateWithoutVoicesInput {
  avatar: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  email: String!
  ratings: RatingCreateManyWithoutAuthorInput
  username: String!
}

input UserUpdateInput {
  avatar: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  email: String
  id: Int
  ratings: RatingUpdateManyWithoutAuthorInput
  username: String
  voices: VoiceUpdateManyWithoutAuthorInput
}

input UserUpdateOneWithoutBooksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutBooksInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutBooksDataInput
  upsert: UserUpsertWithoutBooksInput
}

input UserUpdateOneWithoutChaptersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChaptersInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutChaptersDataInput
  upsert: UserUpsertWithoutChaptersInput
}

input UserUpdateOneWithoutRatingsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRatingsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutRatingsDataInput
  upsert: UserUpsertWithoutRatingsInput
}

input UserUpdateOneWithoutVoicesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutVoicesInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutVoicesDataInput
  upsert: UserUpsertWithoutVoicesInput
}

input UserUpdateWithoutBooksDataInput {
  avatar: String
  chapters: ChapterUpdateManyWithoutAuthorInput
  email: String
  id: Int
  ratings: RatingUpdateManyWithoutAuthorInput
  username: String
  voices: VoiceUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutChaptersDataInput {
  avatar: String
  books: BookUpdateManyWithoutAuthorInput
  email: String
  id: Int
  ratings: RatingUpdateManyWithoutAuthorInput
  username: String
  voices: VoiceUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutRatingsDataInput {
  avatar: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  email: String
  id: Int
  username: String
  voices: VoiceUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutVoicesDataInput {
  avatar: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  email: String
  id: Int
  ratings: RatingUpdateManyWithoutAuthorInput
  username: String
}

input UserUpsertWithoutBooksInput {
  create: UserCreateWithoutBooksInput!
  update: UserUpdateWithoutBooksDataInput!
}

input UserUpsertWithoutChaptersInput {
  create: UserCreateWithoutChaptersInput!
  update: UserUpdateWithoutChaptersDataInput!
}

input UserUpsertWithoutRatingsInput {
  create: UserCreateWithoutRatingsInput!
  update: UserUpdateWithoutRatingsDataInput!
}

input UserUpsertWithoutVoicesInput {
  create: UserCreateWithoutVoicesInput!
  update: UserUpdateWithoutVoicesDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  avatar: NullableStringFilter
  books: BookFilter
  chapters: ChapterFilter
  email: StringFilter
  id: IntFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  ratings: RatingFilter
  username: StringFilter
  voices: VoiceFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
  username: String
}

type Voice {
  author: User
  book: Book
  chapter: Chapter
  id: Int!
  ratings: [Rating!]!
  url: String!
}

input VoiceCreateInput {
  author: UserCreateOneWithoutVoicesInput
  book: BookCreateOneWithoutVoicesInput
  chapter: ChapterCreateOneWithoutVoicesInput
  ratings: RatingCreateManyWithoutVoiceInput
  url: String!
}

input VoiceCreateManyWithoutAuthorInput {
  connect: [VoiceWhereUniqueInput!]
  create: [VoiceCreateWithoutAuthorInput!]
}

input VoiceCreateManyWithoutBookInput {
  connect: [VoiceWhereUniqueInput!]
  create: [VoiceCreateWithoutBookInput!]
}

input VoiceCreateManyWithoutChapterInput {
  connect: [VoiceWhereUniqueInput!]
  create: [VoiceCreateWithoutChapterInput!]
}

input VoiceCreateOneWithoutRatingsInput {
  connect: VoiceWhereUniqueInput
  create: VoiceCreateWithoutRatingsInput
}

input VoiceCreateWithoutAuthorInput {
  book: BookCreateOneWithoutVoicesInput
  chapter: ChapterCreateOneWithoutVoicesInput
  ratings: RatingCreateManyWithoutVoiceInput
  url: String!
}

input VoiceCreateWithoutBookInput {
  author: UserCreateOneWithoutVoicesInput
  chapter: ChapterCreateOneWithoutVoicesInput
  ratings: RatingCreateManyWithoutVoiceInput
  url: String!
}

input VoiceCreateWithoutChapterInput {
  author: UserCreateOneWithoutVoicesInput
  book: BookCreateOneWithoutVoicesInput
  ratings: RatingCreateManyWithoutVoiceInput
  url: String!
}

input VoiceCreateWithoutRatingsInput {
  author: UserCreateOneWithoutVoicesInput
  book: BookCreateOneWithoutVoicesInput
  chapter: ChapterCreateOneWithoutVoicesInput
  url: String!
}

input VoiceFilter {
  every: VoiceWhereInput
  none: VoiceWhereInput
  some: VoiceWhereInput
}

input VoiceScalarWhereInput {
  AND: [VoiceScalarWhereInput!]
  authorUsername: NullableStringFilter
  bookId: NullableIntFilter
  chapterId: NullableIntFilter
  id: IntFilter
  NOT: [VoiceScalarWhereInput!]
  OR: [VoiceScalarWhereInput!]
  ratings: RatingFilter
  url: StringFilter
}

input VoiceUpdateInput {
  author: UserUpdateOneWithoutVoicesInput
  book: BookUpdateOneWithoutVoicesInput
  chapter: ChapterUpdateOneWithoutVoicesInput
  id: Int
  ratings: RatingUpdateManyWithoutVoiceInput
  url: String
}

input VoiceUpdateManyDataInput {
  id: Int
  url: String
}

input VoiceUpdateManyWithoutAuthorInput {
  connect: [VoiceWhereUniqueInput!]
  create: [VoiceCreateWithoutAuthorInput!]
  delete: [VoiceWhereUniqueInput!]
  deleteMany: [VoiceScalarWhereInput!]
  disconnect: [VoiceWhereUniqueInput!]
  set: [VoiceWhereUniqueInput!]
  update: [VoiceUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [VoiceUpdateManyWithWhereNestedInput!]
  upsert: [VoiceUpsertWithWhereUniqueWithoutAuthorInput!]
}

input VoiceUpdateManyWithoutBookInput {
  connect: [VoiceWhereUniqueInput!]
  create: [VoiceCreateWithoutBookInput!]
  delete: [VoiceWhereUniqueInput!]
  deleteMany: [VoiceScalarWhereInput!]
  disconnect: [VoiceWhereUniqueInput!]
  set: [VoiceWhereUniqueInput!]
  update: [VoiceUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [VoiceUpdateManyWithWhereNestedInput!]
  upsert: [VoiceUpsertWithWhereUniqueWithoutBookInput!]
}

input VoiceUpdateManyWithoutChapterInput {
  connect: [VoiceWhereUniqueInput!]
  create: [VoiceCreateWithoutChapterInput!]
  delete: [VoiceWhereUniqueInput!]
  deleteMany: [VoiceScalarWhereInput!]
  disconnect: [VoiceWhereUniqueInput!]
  set: [VoiceWhereUniqueInput!]
  update: [VoiceUpdateWithWhereUniqueWithoutChapterInput!]
  updateMany: [VoiceUpdateManyWithWhereNestedInput!]
  upsert: [VoiceUpsertWithWhereUniqueWithoutChapterInput!]
}

input VoiceUpdateManyWithWhereNestedInput {
  data: VoiceUpdateManyDataInput!
  where: VoiceScalarWhereInput!
}

input VoiceUpdateOneWithoutRatingsInput {
  connect: VoiceWhereUniqueInput
  create: VoiceCreateWithoutRatingsInput
  delete: Boolean
  disconnect: Boolean
  update: VoiceUpdateWithoutRatingsDataInput
  upsert: VoiceUpsertWithoutRatingsInput
}

input VoiceUpdateWithoutAuthorDataInput {
  book: BookUpdateOneWithoutVoicesInput
  chapter: ChapterUpdateOneWithoutVoicesInput
  id: Int
  ratings: RatingUpdateManyWithoutVoiceInput
  url: String
}

input VoiceUpdateWithoutBookDataInput {
  author: UserUpdateOneWithoutVoicesInput
  chapter: ChapterUpdateOneWithoutVoicesInput
  id: Int
  ratings: RatingUpdateManyWithoutVoiceInput
  url: String
}

input VoiceUpdateWithoutChapterDataInput {
  author: UserUpdateOneWithoutVoicesInput
  book: BookUpdateOneWithoutVoicesInput
  id: Int
  ratings: RatingUpdateManyWithoutVoiceInput
  url: String
}

input VoiceUpdateWithoutRatingsDataInput {
  author: UserUpdateOneWithoutVoicesInput
  book: BookUpdateOneWithoutVoicesInput
  chapter: ChapterUpdateOneWithoutVoicesInput
  id: Int
  url: String
}

input VoiceUpdateWithWhereUniqueWithoutAuthorInput {
  data: VoiceUpdateWithoutAuthorDataInput!
  where: VoiceWhereUniqueInput!
}

input VoiceUpdateWithWhereUniqueWithoutBookInput {
  data: VoiceUpdateWithoutBookDataInput!
  where: VoiceWhereUniqueInput!
}

input VoiceUpdateWithWhereUniqueWithoutChapterInput {
  data: VoiceUpdateWithoutChapterDataInput!
  where: VoiceWhereUniqueInput!
}

input VoiceUpsertWithoutRatingsInput {
  create: VoiceCreateWithoutRatingsInput!
  update: VoiceUpdateWithoutRatingsDataInput!
}

input VoiceUpsertWithWhereUniqueWithoutAuthorInput {
  create: VoiceCreateWithoutAuthorInput!
  update: VoiceUpdateWithoutAuthorDataInput!
  where: VoiceWhereUniqueInput!
}

input VoiceUpsertWithWhereUniqueWithoutBookInput {
  create: VoiceCreateWithoutBookInput!
  update: VoiceUpdateWithoutBookDataInput!
  where: VoiceWhereUniqueInput!
}

input VoiceUpsertWithWhereUniqueWithoutChapterInput {
  create: VoiceCreateWithoutChapterInput!
  update: VoiceUpdateWithoutChapterDataInput!
  where: VoiceWhereUniqueInput!
}

input VoiceWhereInput {
  AND: [VoiceWhereInput!]
  author: UserWhereInput
  authorUsername: NullableStringFilter
  book: BookWhereInput
  bookId: NullableIntFilter
  chapter: ChapterWhereInput
  chapterId: NullableIntFilter
  id: IntFilter
  NOT: [VoiceWhereInput!]
  OR: [VoiceWhereInput!]
  ratings: RatingFilter
  url: StringFilter
}

input VoiceWhereUniqueInput {
  id: Int
}
