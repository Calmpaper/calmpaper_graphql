### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

type BatchPayload {
  count: Int!
}

type Book {
  archived: Boolean
  author: User
  chapters(orderBy: [ChapterOrderByInput!]): [Chapter!]!
  comments(orderBy: [CommentOrderByInput!], skip: Int): [Comment!]!
  createdAt: DateTime!
  description: String!
  donations: [Donation!]!
  genres: [Genre!]!
  id: Int!
  image: String
  likes: [Like!]!
  name: String!
  readers: [User!]!
  reviews: [Review!]!
  tags: [Tag!]!
  views: Int!
}

input BookCreateInput {
  archived: Boolean
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  donations: DonationCreateManyWithoutBookInput
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateManyWithoutAuthorInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutAuthorInput!]
}

input BookCreateManyWithoutGenresInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutGenresInput!]
}

input BookCreateManyWithoutReadersInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutReadersInput!]
}

input BookCreateManyWithoutTagsInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutTagsInput!]
}

input BookCreateOneWithoutChaptersInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutChaptersInput
}

input BookCreateOneWithoutCommentsInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutCommentsInput
}

input BookCreateOneWithoutDonationsInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutDonationsInput
}

input BookCreateOneWithoutLikesInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutLikesInput
}

input BookCreateOneWithoutReviewsInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutReviewsInput
}

input BookCreateWithoutAuthorInput {
  archived: Boolean
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  donations: DonationCreateManyWithoutBookInput
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutChaptersInput {
  archived: Boolean
  author: UserCreateOneWithoutBooksInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  donations: DonationCreateManyWithoutBookInput
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutCommentsInput {
  archived: Boolean
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  donations: DonationCreateManyWithoutBookInput
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutDonationsInput {
  archived: Boolean
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutGenresInput {
  archived: Boolean
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  donations: DonationCreateManyWithoutBookInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutLikesInput {
  archived: Boolean
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  donations: DonationCreateManyWithoutBookInput
  genres: GenreCreateManyWithoutBooksInput
  image: String
  name: String!
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutReadersInput {
  archived: Boolean
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  donations: DonationCreateManyWithoutBookInput
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutReviewsInput {
  archived: Boolean
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  donations: DonationCreateManyWithoutBookInput
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  readers: UserCreateManyWithoutFavoriteBooksInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutTagsInput {
  archived: Boolean
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  donations: DonationCreateManyWithoutBookInput
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  views: Int
}

input BookListRelationFilter {
  every: BookWhereInput
  none: BookWhereInput
  some: BookWhereInput
}

input BookOrderByInput {
  archived: SortOrder
  authorId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  views: SortOrder
}

input BookScalarWhereInput {
  AND: [BookScalarWhereInput!]
  archived: BoolNullableFilter
  authorId: IntNullableFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: IntFilter
  image: StringNullableFilter
  name: StringFilter
  NOT: [BookScalarWhereInput!]
  OR: [BookScalarWhereInput!]
  views: IntFilter
}

input BookUpdateInput {
  archived: Boolean
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  donations: DonationUpdateManyWithoutBookInput
  genres: GenreUpdateManyWithoutBooksInput
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateManyDataInput {
  archived: Boolean
  createdAt: DateTime
  description: String
  image: String
  name: String
  views: Int
}

input BookUpdateManyMutationInput {
  archived: Boolean
  createdAt: DateTime
  description: String
  image: String
  name: String
  views: Int
}

input BookUpdateManyWithoutAuthorInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutAuthorInput!]
  delete: [BookWhereUniqueInput!]
  deleteMany: [BookScalarWhereInput!]
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutAuthorInput!]
}

input BookUpdateManyWithoutGenresInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutGenresInput!]
  delete: [BookWhereUniqueInput!]
  deleteMany: [BookScalarWhereInput!]
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutGenresInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutGenresInput!]
}

input BookUpdateManyWithoutReadersInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutReadersInput!]
  delete: [BookWhereUniqueInput!]
  deleteMany: [BookScalarWhereInput!]
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutReadersInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutReadersInput!]
}

input BookUpdateManyWithoutTagsInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutTagsInput!]
  delete: [BookWhereUniqueInput!]
  deleteMany: [BookScalarWhereInput!]
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutTagsInput!]
}

input BookUpdateManyWithWhereNestedInput {
  data: BookUpdateManyDataInput!
  where: BookScalarWhereInput!
}

input BookUpdateOneWithoutChaptersInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutChaptersInput
  delete: Boolean
  disconnect: Boolean
  update: BookUpdateWithoutChaptersDataInput
  upsert: BookUpsertWithoutChaptersInput
}

input BookUpdateOneWithoutCommentsInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: BookUpdateWithoutCommentsDataInput
  upsert: BookUpsertWithoutCommentsInput
}

input BookUpdateOneWithoutDonationsInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutDonationsInput
  delete: Boolean
  disconnect: Boolean
  update: BookUpdateWithoutDonationsDataInput
  upsert: BookUpsertWithoutDonationsInput
}

input BookUpdateOneWithoutLikesInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  update: BookUpdateWithoutLikesDataInput
  upsert: BookUpsertWithoutLikesInput
}

input BookUpdateOneWithoutReviewsInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutReviewsInput
  delete: Boolean
  disconnect: Boolean
  update: BookUpdateWithoutReviewsDataInput
  upsert: BookUpsertWithoutReviewsInput
}

input BookUpdateWithoutAuthorDataInput {
  archived: Boolean
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  donations: DonationUpdateManyWithoutBookInput
  genres: GenreUpdateManyWithoutBooksInput
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutChaptersDataInput {
  archived: Boolean
  author: UserUpdateOneWithoutBooksInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  donations: DonationUpdateManyWithoutBookInput
  genres: GenreUpdateManyWithoutBooksInput
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutCommentsDataInput {
  archived: Boolean
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  donations: DonationUpdateManyWithoutBookInput
  genres: GenreUpdateManyWithoutBooksInput
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutDonationsDataInput {
  archived: Boolean
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  genres: GenreUpdateManyWithoutBooksInput
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutGenresDataInput {
  archived: Boolean
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  donations: DonationUpdateManyWithoutBookInput
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutLikesDataInput {
  archived: Boolean
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  donations: DonationUpdateManyWithoutBookInput
  genres: GenreUpdateManyWithoutBooksInput
  image: String
  name: String
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutReadersDataInput {
  archived: Boolean
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  donations: DonationUpdateManyWithoutBookInput
  genres: GenreUpdateManyWithoutBooksInput
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutReviewsDataInput {
  archived: Boolean
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  donations: DonationUpdateManyWithoutBookInput
  genres: GenreUpdateManyWithoutBooksInput
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  readers: UserUpdateManyWithoutFavoriteBooksInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutTagsDataInput {
  archived: Boolean
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  donations: DonationUpdateManyWithoutBookInput
  genres: GenreUpdateManyWithoutBooksInput
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  views: Int
}

input BookUpdateWithWhereUniqueWithoutAuthorInput {
  data: BookUpdateWithoutAuthorDataInput!
  where: BookWhereUniqueInput!
}

input BookUpdateWithWhereUniqueWithoutGenresInput {
  data: BookUpdateWithoutGenresDataInput!
  where: BookWhereUniqueInput!
}

input BookUpdateWithWhereUniqueWithoutReadersInput {
  data: BookUpdateWithoutReadersDataInput!
  where: BookWhereUniqueInput!
}

input BookUpdateWithWhereUniqueWithoutTagsInput {
  data: BookUpdateWithoutTagsDataInput!
  where: BookWhereUniqueInput!
}

input BookUpsertWithoutChaptersInput {
  create: BookCreateWithoutChaptersInput!
  update: BookUpdateWithoutChaptersDataInput!
}

input BookUpsertWithoutCommentsInput {
  create: BookCreateWithoutCommentsInput!
  update: BookUpdateWithoutCommentsDataInput!
}

input BookUpsertWithoutDonationsInput {
  create: BookCreateWithoutDonationsInput!
  update: BookUpdateWithoutDonationsDataInput!
}

input BookUpsertWithoutLikesInput {
  create: BookCreateWithoutLikesInput!
  update: BookUpdateWithoutLikesDataInput!
}

input BookUpsertWithoutReviewsInput {
  create: BookCreateWithoutReviewsInput!
  update: BookUpdateWithoutReviewsDataInput!
}

input BookUpsertWithWhereUniqueWithoutAuthorInput {
  create: BookCreateWithoutAuthorInput!
  update: BookUpdateWithoutAuthorDataInput!
  where: BookWhereUniqueInput!
}

input BookUpsertWithWhereUniqueWithoutGenresInput {
  create: BookCreateWithoutGenresInput!
  update: BookUpdateWithoutGenresDataInput!
  where: BookWhereUniqueInput!
}

input BookUpsertWithWhereUniqueWithoutReadersInput {
  create: BookCreateWithoutReadersInput!
  update: BookUpdateWithoutReadersDataInput!
  where: BookWhereUniqueInput!
}

input BookUpsertWithWhereUniqueWithoutTagsInput {
  create: BookCreateWithoutTagsInput!
  update: BookUpdateWithoutTagsDataInput!
  where: BookWhereUniqueInput!
}

input BookWhereInput {
  AND: [BookWhereInput!]
  archived: BoolNullableFilter
  author: UserWhereInput
  authorId: IntNullableFilter
  chapters: ChapterListRelationFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  description: StringFilter
  donations: DonationListRelationFilter
  genres: GenreListRelationFilter
  id: IntFilter
  image: StringNullableFilter
  likes: LikeListRelationFilter
  name: StringFilter
  NOT: [BookWhereInput!]
  OR: [BookWhereInput!]
  readers: UserListRelationFilter
  reviews: ReviewListRelationFilter
  tags: TagListRelationFilter
  views: IntFilter
}

input BookWhereUniqueInput {
  id: Int
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

type Chapter {
  author: User
  book: Book
  comments(orderBy: [CommentOrderByInput!], skip: Int): [Comment!]!
  content: String!
  createdAt: DateTime!
  donations: [Donation!]!
  id: Int!
  image: String
  likes: [Like!]!
  reviews: [Review!]!
  title: String
  views: Int!
}

input ChapterCreateInput {
  author: UserCreateOneWithoutChaptersInput
  book: BookCreateOneWithoutChaptersInput
  comments: CommentCreateManyWithoutChapterInput
  content: String!
  createdAt: DateTime
  donations: DonationCreateManyWithoutChapterInput
  image: String
  likes: LikeCreateManyWithoutChapterInput
  reviews: ReviewCreateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterCreateManyWithoutAuthorInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutAuthorInput!]
}

input ChapterCreateManyWithoutBookInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutBookInput!]
}

input ChapterCreateOneWithoutCommentsInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutCommentsInput
}

input ChapterCreateOneWithoutDonationsInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutDonationsInput
}

input ChapterCreateOneWithoutLikesInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutLikesInput
}

input ChapterCreateOneWithoutReviewsInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutReviewsInput
}

input ChapterCreateWithoutAuthorInput {
  book: BookCreateOneWithoutChaptersInput
  comments: CommentCreateManyWithoutChapterInput
  content: String!
  createdAt: DateTime
  donations: DonationCreateManyWithoutChapterInput
  image: String
  likes: LikeCreateManyWithoutChapterInput
  reviews: ReviewCreateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterCreateWithoutBookInput {
  author: UserCreateOneWithoutChaptersInput
  comments: CommentCreateManyWithoutChapterInput
  content: String!
  createdAt: DateTime
  donations: DonationCreateManyWithoutChapterInput
  image: String
  likes: LikeCreateManyWithoutChapterInput
  reviews: ReviewCreateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterCreateWithoutCommentsInput {
  author: UserCreateOneWithoutChaptersInput
  book: BookCreateOneWithoutChaptersInput
  content: String!
  createdAt: DateTime
  donations: DonationCreateManyWithoutChapterInput
  image: String
  likes: LikeCreateManyWithoutChapterInput
  reviews: ReviewCreateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterCreateWithoutDonationsInput {
  author: UserCreateOneWithoutChaptersInput
  book: BookCreateOneWithoutChaptersInput
  comments: CommentCreateManyWithoutChapterInput
  content: String!
  createdAt: DateTime
  image: String
  likes: LikeCreateManyWithoutChapterInput
  reviews: ReviewCreateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterCreateWithoutLikesInput {
  author: UserCreateOneWithoutChaptersInput
  book: BookCreateOneWithoutChaptersInput
  comments: CommentCreateManyWithoutChapterInput
  content: String!
  createdAt: DateTime
  donations: DonationCreateManyWithoutChapterInput
  image: String
  reviews: ReviewCreateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterCreateWithoutReviewsInput {
  author: UserCreateOneWithoutChaptersInput
  book: BookCreateOneWithoutChaptersInput
  comments: CommentCreateManyWithoutChapterInput
  content: String!
  createdAt: DateTime
  donations: DonationCreateManyWithoutChapterInput
  image: String
  likes: LikeCreateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterListRelationFilter {
  every: ChapterWhereInput
  none: ChapterWhereInput
  some: ChapterWhereInput
}

input ChapterOrderByInput {
  authorId: SortOrder
  bookId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  image: SortOrder
  title: SortOrder
  views: SortOrder
}

input ChapterScalarWhereInput {
  AND: [ChapterScalarWhereInput!]
  authorId: IntNullableFilter
  bookId: IntNullableFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  image: StringNullableFilter
  NOT: [ChapterScalarWhereInput!]
  OR: [ChapterScalarWhereInput!]
  title: StringNullableFilter
  views: IntFilter
}

input ChapterUpdateInput {
  author: UserUpdateOneWithoutChaptersInput
  book: BookUpdateOneWithoutChaptersInput
  comments: CommentUpdateManyWithoutChapterInput
  content: String
  createdAt: DateTime
  donations: DonationUpdateManyWithoutChapterInput
  image: String
  likes: LikeUpdateManyWithoutChapterInput
  reviews: ReviewUpdateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterUpdateManyDataInput {
  content: String
  createdAt: DateTime
  image: String
  title: String
  views: Int
}

input ChapterUpdateManyMutationInput {
  content: String
  createdAt: DateTime
  image: String
  title: String
  views: Int
}

input ChapterUpdateManyWithoutAuthorInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutAuthorInput!]
  delete: [ChapterWhereUniqueInput!]
  deleteMany: [ChapterScalarWhereInput!]
  disconnect: [ChapterWhereUniqueInput!]
  set: [ChapterWhereUniqueInput!]
  update: [ChapterUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ChapterUpdateManyWithWhereNestedInput!]
  upsert: [ChapterUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ChapterUpdateManyWithoutBookInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutBookInput!]
  delete: [ChapterWhereUniqueInput!]
  deleteMany: [ChapterScalarWhereInput!]
  disconnect: [ChapterWhereUniqueInput!]
  set: [ChapterWhereUniqueInput!]
  update: [ChapterUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [ChapterUpdateManyWithWhereNestedInput!]
  upsert: [ChapterUpsertWithWhereUniqueWithoutBookInput!]
}

input ChapterUpdateManyWithWhereNestedInput {
  data: ChapterUpdateManyDataInput!
  where: ChapterScalarWhereInput!
}

input ChapterUpdateOneWithoutCommentsInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: ChapterUpdateWithoutCommentsDataInput
  upsert: ChapterUpsertWithoutCommentsInput
}

input ChapterUpdateOneWithoutDonationsInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutDonationsInput
  delete: Boolean
  disconnect: Boolean
  update: ChapterUpdateWithoutDonationsDataInput
  upsert: ChapterUpsertWithoutDonationsInput
}

input ChapterUpdateOneWithoutLikesInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  update: ChapterUpdateWithoutLikesDataInput
  upsert: ChapterUpsertWithoutLikesInput
}

input ChapterUpdateOneWithoutReviewsInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutReviewsInput
  delete: Boolean
  disconnect: Boolean
  update: ChapterUpdateWithoutReviewsDataInput
  upsert: ChapterUpsertWithoutReviewsInput
}

input ChapterUpdateWithoutAuthorDataInput {
  book: BookUpdateOneWithoutChaptersInput
  comments: CommentUpdateManyWithoutChapterInput
  content: String
  createdAt: DateTime
  donations: DonationUpdateManyWithoutChapterInput
  image: String
  likes: LikeUpdateManyWithoutChapterInput
  reviews: ReviewUpdateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterUpdateWithoutBookDataInput {
  author: UserUpdateOneWithoutChaptersInput
  comments: CommentUpdateManyWithoutChapterInput
  content: String
  createdAt: DateTime
  donations: DonationUpdateManyWithoutChapterInput
  image: String
  likes: LikeUpdateManyWithoutChapterInput
  reviews: ReviewUpdateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterUpdateWithoutCommentsDataInput {
  author: UserUpdateOneWithoutChaptersInput
  book: BookUpdateOneWithoutChaptersInput
  content: String
  createdAt: DateTime
  donations: DonationUpdateManyWithoutChapterInput
  image: String
  likes: LikeUpdateManyWithoutChapterInput
  reviews: ReviewUpdateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterUpdateWithoutDonationsDataInput {
  author: UserUpdateOneWithoutChaptersInput
  book: BookUpdateOneWithoutChaptersInput
  comments: CommentUpdateManyWithoutChapterInput
  content: String
  createdAt: DateTime
  image: String
  likes: LikeUpdateManyWithoutChapterInput
  reviews: ReviewUpdateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterUpdateWithoutLikesDataInput {
  author: UserUpdateOneWithoutChaptersInput
  book: BookUpdateOneWithoutChaptersInput
  comments: CommentUpdateManyWithoutChapterInput
  content: String
  createdAt: DateTime
  donations: DonationUpdateManyWithoutChapterInput
  image: String
  reviews: ReviewUpdateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterUpdateWithoutReviewsDataInput {
  author: UserUpdateOneWithoutChaptersInput
  book: BookUpdateOneWithoutChaptersInput
  comments: CommentUpdateManyWithoutChapterInput
  content: String
  createdAt: DateTime
  donations: DonationUpdateManyWithoutChapterInput
  image: String
  likes: LikeUpdateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterUpdateWithWhereUniqueWithoutAuthorInput {
  data: ChapterUpdateWithoutAuthorDataInput!
  where: ChapterWhereUniqueInput!
}

input ChapterUpdateWithWhereUniqueWithoutBookInput {
  data: ChapterUpdateWithoutBookDataInput!
  where: ChapterWhereUniqueInput!
}

input ChapterUpsertWithoutCommentsInput {
  create: ChapterCreateWithoutCommentsInput!
  update: ChapterUpdateWithoutCommentsDataInput!
}

input ChapterUpsertWithoutDonationsInput {
  create: ChapterCreateWithoutDonationsInput!
  update: ChapterUpdateWithoutDonationsDataInput!
}

input ChapterUpsertWithoutLikesInput {
  create: ChapterCreateWithoutLikesInput!
  update: ChapterUpdateWithoutLikesDataInput!
}

input ChapterUpsertWithoutReviewsInput {
  create: ChapterCreateWithoutReviewsInput!
  update: ChapterUpdateWithoutReviewsDataInput!
}

input ChapterUpsertWithWhereUniqueWithoutAuthorInput {
  create: ChapterCreateWithoutAuthorInput!
  update: ChapterUpdateWithoutAuthorDataInput!
  where: ChapterWhereUniqueInput!
}

input ChapterUpsertWithWhereUniqueWithoutBookInput {
  create: ChapterCreateWithoutBookInput!
  update: ChapterUpdateWithoutBookDataInput!
  where: ChapterWhereUniqueInput!
}

input ChapterWhereInput {
  AND: [ChapterWhereInput!]
  author: UserWhereInput
  authorId: IntNullableFilter
  book: BookWhereInput
  bookId: IntNullableFilter
  comments: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  donations: DonationListRelationFilter
  id: IntFilter
  image: StringNullableFilter
  likes: LikeListRelationFilter
  NOT: [ChapterWhereInput!]
  OR: [ChapterWhereInput!]
  reviews: ReviewListRelationFilter
  title: StringNullableFilter
  views: IntFilter
}

input ChapterWhereUniqueInput {
  id: Int
}

type Comment {
  author: User
  body: String!
  book: Book
  chapter: Chapter
  createdAt: DateTime!
  id: Int!
  isChild: Boolean!
  likes: [Like!]!
  parent: Comment
  replies(orderBy: [CommentOrderByInput!]): [Comment!]!
}

input CommentCreateInput {
  author: UserCreateOneWithoutCommentsInput
  body: String!
  book: BookCreateOneWithoutCommentsInput
  chapter: ChapterCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeCreateManyWithoutCommentInput
  parent: CommentCreateOneWithoutRepliesInput
  replies: CommentCreateManyWithoutParentInput
}

input CommentCreateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutAuthorInput!]
}

input CommentCreateManyWithoutBookInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutBookInput!]
}

input CommentCreateManyWithoutChapterInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutChapterInput!]
}

input CommentCreateManyWithoutParentInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutParentInput!]
}

input CommentCreateOneWithoutLikesInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutLikesInput
}

input CommentCreateOneWithoutRepliesInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutRepliesInput
}

input CommentCreateWithoutAuthorInput {
  body: String!
  book: BookCreateOneWithoutCommentsInput
  chapter: ChapterCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeCreateManyWithoutCommentInput
  parent: CommentCreateOneWithoutRepliesInput
  replies: CommentCreateManyWithoutParentInput
}

input CommentCreateWithoutBookInput {
  author: UserCreateOneWithoutCommentsInput
  body: String!
  chapter: ChapterCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeCreateManyWithoutCommentInput
  parent: CommentCreateOneWithoutRepliesInput
  replies: CommentCreateManyWithoutParentInput
}

input CommentCreateWithoutChapterInput {
  author: UserCreateOneWithoutCommentsInput
  body: String!
  book: BookCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeCreateManyWithoutCommentInput
  parent: CommentCreateOneWithoutRepliesInput
  replies: CommentCreateManyWithoutParentInput
}

input CommentCreateWithoutLikesInput {
  author: UserCreateOneWithoutCommentsInput
  body: String!
  book: BookCreateOneWithoutCommentsInput
  chapter: ChapterCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  parent: CommentCreateOneWithoutRepliesInput
  replies: CommentCreateManyWithoutParentInput
}

input CommentCreateWithoutParentInput {
  author: UserCreateOneWithoutCommentsInput
  body: String!
  book: BookCreateOneWithoutCommentsInput
  chapter: ChapterCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeCreateManyWithoutCommentInput
  replies: CommentCreateManyWithoutParentInput
}

input CommentCreateWithoutRepliesInput {
  author: UserCreateOneWithoutCommentsInput
  body: String!
  book: BookCreateOneWithoutCommentsInput
  chapter: ChapterCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeCreateManyWithoutCommentInput
  parent: CommentCreateOneWithoutRepliesInput
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentOrderByInput {
  authorId: SortOrder
  body: SortOrder
  bookId: SortOrder
  chapterId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isChild: SortOrder
  parentId: SortOrder
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  authorId: IntNullableFilter
  body: StringFilter
  bookId: IntNullableFilter
  chapterId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  isChild: BoolFilter
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  parentId: IntNullableFilter
}

input CommentUpdateInput {
  author: UserUpdateOneWithoutCommentsInput
  body: String
  book: BookUpdateOneWithoutCommentsInput
  chapter: ChapterUpdateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeUpdateManyWithoutCommentInput
  parent: CommentUpdateOneWithoutRepliesInput
  replies: CommentUpdateManyWithoutParentInput
}

input CommentUpdateManyDataInput {
  body: String
  createdAt: DateTime
  isChild: Boolean
}

input CommentUpdateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutAuthorInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutBookInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutBookInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutBookInput!]
}

input CommentUpdateManyWithoutChapterInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutChapterInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutChapterInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutChapterInput!]
}

input CommentUpdateManyWithoutParentInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutParentInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  data: CommentUpdateManyDataInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateOneWithoutLikesInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutLikesDataInput
  upsert: CommentUpsertWithoutLikesInput
}

input CommentUpdateOneWithoutRepliesInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutRepliesInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutRepliesDataInput
  upsert: CommentUpsertWithoutRepliesInput
}

input CommentUpdateWithoutAuthorDataInput {
  body: String
  book: BookUpdateOneWithoutCommentsInput
  chapter: ChapterUpdateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeUpdateManyWithoutCommentInput
  parent: CommentUpdateOneWithoutRepliesInput
  replies: CommentUpdateManyWithoutParentInput
}

input CommentUpdateWithoutBookDataInput {
  author: UserUpdateOneWithoutCommentsInput
  body: String
  chapter: ChapterUpdateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeUpdateManyWithoutCommentInput
  parent: CommentUpdateOneWithoutRepliesInput
  replies: CommentUpdateManyWithoutParentInput
}

input CommentUpdateWithoutChapterDataInput {
  author: UserUpdateOneWithoutCommentsInput
  body: String
  book: BookUpdateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeUpdateManyWithoutCommentInput
  parent: CommentUpdateOneWithoutRepliesInput
  replies: CommentUpdateManyWithoutParentInput
}

input CommentUpdateWithoutLikesDataInput {
  author: UserUpdateOneWithoutCommentsInput
  body: String
  book: BookUpdateOneWithoutCommentsInput
  chapter: ChapterUpdateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  parent: CommentUpdateOneWithoutRepliesInput
  replies: CommentUpdateManyWithoutParentInput
}

input CommentUpdateWithoutParentDataInput {
  author: UserUpdateOneWithoutCommentsInput
  body: String
  book: BookUpdateOneWithoutCommentsInput
  chapter: ChapterUpdateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeUpdateManyWithoutCommentInput
  replies: CommentUpdateManyWithoutParentInput
}

input CommentUpdateWithoutRepliesDataInput {
  author: UserUpdateOneWithoutCommentsInput
  body: String
  book: BookUpdateOneWithoutCommentsInput
  chapter: ChapterUpdateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeUpdateManyWithoutCommentInput
  parent: CommentUpdateOneWithoutRepliesInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommentUpdateWithoutAuthorDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutBookInput {
  data: CommentUpdateWithoutBookDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutChapterInput {
  data: CommentUpdateWithoutChapterDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutParentInput {
  data: CommentUpdateWithoutParentDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithoutLikesInput {
  create: CommentCreateWithoutLikesInput!
  update: CommentUpdateWithoutLikesDataInput!
}

input CommentUpsertWithoutRepliesInput {
  create: CommentCreateWithoutRepliesInput!
  update: CommentUpdateWithoutRepliesDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  update: CommentUpdateWithoutAuthorDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutBookInput {
  create: CommentCreateWithoutBookInput!
  update: CommentUpdateWithoutBookDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutChapterInput {
  create: CommentCreateWithoutChapterInput!
  update: CommentUpdateWithoutChapterDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutParentInput {
  create: CommentCreateWithoutParentInput!
  update: CommentUpdateWithoutParentDataInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  author: UserWhereInput
  authorId: IntNullableFilter
  body: StringFilter
  book: BookWhereInput
  bookId: IntNullableFilter
  chapter: ChapterWhereInput
  chapterId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  isChild: BoolFilter
  likes: LikeListRelationFilter
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  parent: CommentWhereInput
  parentId: IntNullableFilter
  replies: CommentListRelationFilter
}

input CommentWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Donation {
  amount: Int!
  book: Book
  chapter: Chapter
  createdAt: DateTime!
  currency: String!
  id: Int!
  message: String
  payer: User
  paymentId: String!
  paymentRequestSecret: String
  recipient: User
}

input DonationCreateManyWithoutBookInput {
  connect: [DonationWhereUniqueInput!]
  create: [DonationCreateWithoutBookInput!]
}

input DonationCreateManyWithoutChapterInput {
  connect: [DonationWhereUniqueInput!]
  create: [DonationCreateWithoutChapterInput!]
}

input DonationCreateManyWithoutPayerInput {
  connect: [DonationWhereUniqueInput!]
  create: [DonationCreateWithoutPayerInput!]
}

input DonationCreateManyWithoutRecipientInput {
  connect: [DonationWhereUniqueInput!]
  create: [DonationCreateWithoutRecipientInput!]
}

input DonationCreateWithoutBookInput {
  amount: Int!
  chapter: ChapterCreateOneWithoutDonationsInput
  createdAt: DateTime
  currency: String!
  message: String
  payer: UserCreateOneWithoutSentDonationsInput
  paymentId: String!
  paymentRequestSecret: String
  recipient: UserCreateOneWithoutReceivedDonationsInput
}

input DonationCreateWithoutChapterInput {
  amount: Int!
  book: BookCreateOneWithoutDonationsInput
  createdAt: DateTime
  currency: String!
  message: String
  payer: UserCreateOneWithoutSentDonationsInput
  paymentId: String!
  paymentRequestSecret: String
  recipient: UserCreateOneWithoutReceivedDonationsInput
}

input DonationCreateWithoutPayerInput {
  amount: Int!
  book: BookCreateOneWithoutDonationsInput
  chapter: ChapterCreateOneWithoutDonationsInput
  createdAt: DateTime
  currency: String!
  message: String
  paymentId: String!
  paymentRequestSecret: String
  recipient: UserCreateOneWithoutReceivedDonationsInput
}

input DonationCreateWithoutRecipientInput {
  amount: Int!
  book: BookCreateOneWithoutDonationsInput
  chapter: ChapterCreateOneWithoutDonationsInput
  createdAt: DateTime
  currency: String!
  message: String
  payer: UserCreateOneWithoutSentDonationsInput
  paymentId: String!
  paymentRequestSecret: String
}

input DonationListRelationFilter {
  every: DonationWhereInput
  none: DonationWhereInput
  some: DonationWhereInput
}

input DonationScalarWhereInput {
  amount: IntFilter
  AND: [DonationScalarWhereInput!]
  bookId: IntNullableFilter
  chapterId: IntNullableFilter
  createdAt: DateTimeFilter
  currency: StringFilter
  id: IntFilter
  message: StringNullableFilter
  NOT: [DonationScalarWhereInput!]
  OR: [DonationScalarWhereInput!]
  payerId: IntNullableFilter
  paymentId: StringFilter
  paymentRequestSecret: StringNullableFilter
  recipientId: IntNullableFilter
}

input DonationUpdateManyDataInput {
  amount: Int
  createdAt: DateTime
  currency: String
  message: String
  paymentId: String
  paymentRequestSecret: String
}

input DonationUpdateManyWithoutBookInput {
  connect: [DonationWhereUniqueInput!]
  create: [DonationCreateWithoutBookInput!]
  delete: [DonationWhereUniqueInput!]
  deleteMany: [DonationScalarWhereInput!]
  disconnect: [DonationWhereUniqueInput!]
  set: [DonationWhereUniqueInput!]
  update: [DonationUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [DonationUpdateManyWithWhereNestedInput!]
  upsert: [DonationUpsertWithWhereUniqueWithoutBookInput!]
}

input DonationUpdateManyWithoutChapterInput {
  connect: [DonationWhereUniqueInput!]
  create: [DonationCreateWithoutChapterInput!]
  delete: [DonationWhereUniqueInput!]
  deleteMany: [DonationScalarWhereInput!]
  disconnect: [DonationWhereUniqueInput!]
  set: [DonationWhereUniqueInput!]
  update: [DonationUpdateWithWhereUniqueWithoutChapterInput!]
  updateMany: [DonationUpdateManyWithWhereNestedInput!]
  upsert: [DonationUpsertWithWhereUniqueWithoutChapterInput!]
}

input DonationUpdateManyWithoutPayerInput {
  connect: [DonationWhereUniqueInput!]
  create: [DonationCreateWithoutPayerInput!]
  delete: [DonationWhereUniqueInput!]
  deleteMany: [DonationScalarWhereInput!]
  disconnect: [DonationWhereUniqueInput!]
  set: [DonationWhereUniqueInput!]
  update: [DonationUpdateWithWhereUniqueWithoutPayerInput!]
  updateMany: [DonationUpdateManyWithWhereNestedInput!]
  upsert: [DonationUpsertWithWhereUniqueWithoutPayerInput!]
}

input DonationUpdateManyWithoutRecipientInput {
  connect: [DonationWhereUniqueInput!]
  create: [DonationCreateWithoutRecipientInput!]
  delete: [DonationWhereUniqueInput!]
  deleteMany: [DonationScalarWhereInput!]
  disconnect: [DonationWhereUniqueInput!]
  set: [DonationWhereUniqueInput!]
  update: [DonationUpdateWithWhereUniqueWithoutRecipientInput!]
  updateMany: [DonationUpdateManyWithWhereNestedInput!]
  upsert: [DonationUpsertWithWhereUniqueWithoutRecipientInput!]
}

input DonationUpdateManyWithWhereNestedInput {
  data: DonationUpdateManyDataInput!
  where: DonationScalarWhereInput!
}

input DonationUpdateWithoutBookDataInput {
  amount: Int
  chapter: ChapterUpdateOneWithoutDonationsInput
  createdAt: DateTime
  currency: String
  message: String
  payer: UserUpdateOneWithoutSentDonationsInput
  paymentId: String
  paymentRequestSecret: String
  recipient: UserUpdateOneWithoutReceivedDonationsInput
}

input DonationUpdateWithoutChapterDataInput {
  amount: Int
  book: BookUpdateOneWithoutDonationsInput
  createdAt: DateTime
  currency: String
  message: String
  payer: UserUpdateOneWithoutSentDonationsInput
  paymentId: String
  paymentRequestSecret: String
  recipient: UserUpdateOneWithoutReceivedDonationsInput
}

input DonationUpdateWithoutPayerDataInput {
  amount: Int
  book: BookUpdateOneWithoutDonationsInput
  chapter: ChapterUpdateOneWithoutDonationsInput
  createdAt: DateTime
  currency: String
  message: String
  paymentId: String
  paymentRequestSecret: String
  recipient: UserUpdateOneWithoutReceivedDonationsInput
}

input DonationUpdateWithoutRecipientDataInput {
  amount: Int
  book: BookUpdateOneWithoutDonationsInput
  chapter: ChapterUpdateOneWithoutDonationsInput
  createdAt: DateTime
  currency: String
  message: String
  payer: UserUpdateOneWithoutSentDonationsInput
  paymentId: String
  paymentRequestSecret: String
}

input DonationUpdateWithWhereUniqueWithoutBookInput {
  data: DonationUpdateWithoutBookDataInput!
  where: DonationWhereUniqueInput!
}

input DonationUpdateWithWhereUniqueWithoutChapterInput {
  data: DonationUpdateWithoutChapterDataInput!
  where: DonationWhereUniqueInput!
}

input DonationUpdateWithWhereUniqueWithoutPayerInput {
  data: DonationUpdateWithoutPayerDataInput!
  where: DonationWhereUniqueInput!
}

input DonationUpdateWithWhereUniqueWithoutRecipientInput {
  data: DonationUpdateWithoutRecipientDataInput!
  where: DonationWhereUniqueInput!
}

input DonationUpsertWithWhereUniqueWithoutBookInput {
  create: DonationCreateWithoutBookInput!
  update: DonationUpdateWithoutBookDataInput!
  where: DonationWhereUniqueInput!
}

input DonationUpsertWithWhereUniqueWithoutChapterInput {
  create: DonationCreateWithoutChapterInput!
  update: DonationUpdateWithoutChapterDataInput!
  where: DonationWhereUniqueInput!
}

input DonationUpsertWithWhereUniqueWithoutPayerInput {
  create: DonationCreateWithoutPayerInput!
  update: DonationUpdateWithoutPayerDataInput!
  where: DonationWhereUniqueInput!
}

input DonationUpsertWithWhereUniqueWithoutRecipientInput {
  create: DonationCreateWithoutRecipientInput!
  update: DonationUpdateWithoutRecipientDataInput!
  where: DonationWhereUniqueInput!
}

input DonationWhereInput {
  amount: IntFilter
  AND: [DonationWhereInput!]
  book: BookWhereInput
  bookId: IntNullableFilter
  chapter: ChapterWhereInput
  chapterId: IntNullableFilter
  createdAt: DateTimeFilter
  currency: StringFilter
  id: IntFilter
  message: StringNullableFilter
  NOT: [DonationWhereInput!]
  OR: [DonationWhereInput!]
  payer: UserWhereInput
  payerId: IntNullableFilter
  paymentId: StringFilter
  paymentRequestSecret: StringNullableFilter
  recipient: UserWhereInput
  recipientId: IntNullableFilter
}

input DonationWhereUniqueInput {
  id: Int
}

type Genre {
  books: [Book!]!
  id: Int!
  label: String!
}

input GenreCreateInput {
  books: BookCreateManyWithoutGenresInput
  label: String!
}

input GenreCreateManyWithoutBooksInput {
  connect: [GenreWhereUniqueInput!]
  create: [GenreCreateWithoutBooksInput!]
}

input GenreCreateWithoutBooksInput {
  label: String!
}

input GenreListRelationFilter {
  every: GenreWhereInput
  none: GenreWhereInput
  some: GenreWhereInput
}

input GenreScalarWhereInput {
  AND: [GenreScalarWhereInput!]
  id: IntFilter
  label: StringFilter
  NOT: [GenreScalarWhereInput!]
  OR: [GenreScalarWhereInput!]
}

input GenreUpdateInput {
  books: BookUpdateManyWithoutGenresInput
  label: String
}

input GenreUpdateManyDataInput {
  label: String
}

input GenreUpdateManyWithoutBooksInput {
  connect: [GenreWhereUniqueInput!]
  create: [GenreCreateWithoutBooksInput!]
  delete: [GenreWhereUniqueInput!]
  deleteMany: [GenreScalarWhereInput!]
  disconnect: [GenreWhereUniqueInput!]
  set: [GenreWhereUniqueInput!]
  update: [GenreUpdateWithWhereUniqueWithoutBooksInput!]
  updateMany: [GenreUpdateManyWithWhereNestedInput!]
  upsert: [GenreUpsertWithWhereUniqueWithoutBooksInput!]
}

input GenreUpdateManyWithWhereNestedInput {
  data: GenreUpdateManyDataInput!
  where: GenreScalarWhereInput!
}

input GenreUpdateWithoutBooksDataInput {
  label: String
}

input GenreUpdateWithWhereUniqueWithoutBooksInput {
  data: GenreUpdateWithoutBooksDataInput!
  where: GenreWhereUniqueInput!
}

input GenreUpsertWithWhereUniqueWithoutBooksInput {
  create: GenreCreateWithoutBooksInput!
  update: GenreUpdateWithoutBooksDataInput!
  where: GenreWhereUniqueInput!
}

input GenreWhereInput {
  AND: [GenreWhereInput!]
  books: BookListRelationFilter
  id: IntFilter
  label: StringFilter
  NOT: [GenreWhereInput!]
  OR: [GenreWhereInput!]
}

input GenreWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Like {
  author: User
  book: Book
  chapter: Chapter
  comment: Comment
  createdAt: DateTime!
  id: Int!
  review: Review
}

input LikeCreateInput {
  author: UserCreateOneWithoutLikesInput
  book: BookCreateOneWithoutLikesInput
  chapter: ChapterCreateOneWithoutLikesInput
  comment: CommentCreateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewCreateOneWithoutLikesInput
}

input LikeCreateManyWithoutAuthorInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutAuthorInput!]
}

input LikeCreateManyWithoutBookInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutBookInput!]
}

input LikeCreateManyWithoutChapterInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutChapterInput!]
}

input LikeCreateManyWithoutCommentInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutCommentInput!]
}

input LikeCreateManyWithoutReviewInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutReviewInput!]
}

input LikeCreateWithoutAuthorInput {
  book: BookCreateOneWithoutLikesInput
  chapter: ChapterCreateOneWithoutLikesInput
  comment: CommentCreateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewCreateOneWithoutLikesInput
}

input LikeCreateWithoutBookInput {
  author: UserCreateOneWithoutLikesInput
  chapter: ChapterCreateOneWithoutLikesInput
  comment: CommentCreateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewCreateOneWithoutLikesInput
}

input LikeCreateWithoutChapterInput {
  author: UserCreateOneWithoutLikesInput
  book: BookCreateOneWithoutLikesInput
  comment: CommentCreateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewCreateOneWithoutLikesInput
}

input LikeCreateWithoutCommentInput {
  author: UserCreateOneWithoutLikesInput
  book: BookCreateOneWithoutLikesInput
  chapter: ChapterCreateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewCreateOneWithoutLikesInput
}

input LikeCreateWithoutReviewInput {
  author: UserCreateOneWithoutLikesInput
  book: BookCreateOneWithoutLikesInput
  chapter: ChapterCreateOneWithoutLikesInput
  comment: CommentCreateOneWithoutLikesInput
  createdAt: DateTime
}

input LikeListRelationFilter {
  every: LikeWhereInput
  none: LikeWhereInput
  some: LikeWhereInput
}

input LikeScalarWhereInput {
  AND: [LikeScalarWhereInput!]
  authorId: IntNullableFilter
  bookId: IntNullableFilter
  chapterId: IntNullableFilter
  commentId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  reviewId: IntNullableFilter
}

input LikeUpdateInput {
  author: UserUpdateOneWithoutLikesInput
  book: BookUpdateOneWithoutLikesInput
  chapter: ChapterUpdateOneWithoutLikesInput
  comment: CommentUpdateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewUpdateOneWithoutLikesInput
}

input LikeUpdateManyDataInput {
  createdAt: DateTime
}

input LikeUpdateManyWithoutAuthorInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutAuthorInput!]
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutAuthorInput!]
}

input LikeUpdateManyWithoutBookInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutBookInput!]
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutBookInput!]
}

input LikeUpdateManyWithoutChapterInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutChapterInput!]
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutChapterInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutChapterInput!]
}

input LikeUpdateManyWithoutCommentInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutCommentInput!]
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutCommentInput!]
}

input LikeUpdateManyWithoutReviewInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutReviewInput!]
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutReviewInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutReviewInput!]
}

input LikeUpdateManyWithWhereNestedInput {
  data: LikeUpdateManyDataInput!
  where: LikeScalarWhereInput!
}

input LikeUpdateWithoutAuthorDataInput {
  book: BookUpdateOneWithoutLikesInput
  chapter: ChapterUpdateOneWithoutLikesInput
  comment: CommentUpdateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewUpdateOneWithoutLikesInput
}

input LikeUpdateWithoutBookDataInput {
  author: UserUpdateOneWithoutLikesInput
  chapter: ChapterUpdateOneWithoutLikesInput
  comment: CommentUpdateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewUpdateOneWithoutLikesInput
}

input LikeUpdateWithoutChapterDataInput {
  author: UserUpdateOneWithoutLikesInput
  book: BookUpdateOneWithoutLikesInput
  comment: CommentUpdateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewUpdateOneWithoutLikesInput
}

input LikeUpdateWithoutCommentDataInput {
  author: UserUpdateOneWithoutLikesInput
  book: BookUpdateOneWithoutLikesInput
  chapter: ChapterUpdateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewUpdateOneWithoutLikesInput
}

input LikeUpdateWithoutReviewDataInput {
  author: UserUpdateOneWithoutLikesInput
  book: BookUpdateOneWithoutLikesInput
  chapter: ChapterUpdateOneWithoutLikesInput
  comment: CommentUpdateOneWithoutLikesInput
  createdAt: DateTime
}

input LikeUpdateWithWhereUniqueWithoutAuthorInput {
  data: LikeUpdateWithoutAuthorDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithWhereUniqueWithoutBookInput {
  data: LikeUpdateWithoutBookDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithWhereUniqueWithoutChapterInput {
  data: LikeUpdateWithoutChapterDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithWhereUniqueWithoutCommentInput {
  data: LikeUpdateWithoutCommentDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithWhereUniqueWithoutReviewInput {
  data: LikeUpdateWithoutReviewDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutAuthorInput {
  create: LikeCreateWithoutAuthorInput!
  update: LikeUpdateWithoutAuthorDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutBookInput {
  create: LikeCreateWithoutBookInput!
  update: LikeUpdateWithoutBookDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutChapterInput {
  create: LikeCreateWithoutChapterInput!
  update: LikeUpdateWithoutChapterDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutCommentInput {
  create: LikeCreateWithoutCommentInput!
  update: LikeUpdateWithoutCommentDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutReviewInput {
  create: LikeCreateWithoutReviewInput!
  update: LikeUpdateWithoutReviewDataInput!
  where: LikeWhereUniqueInput!
}

input LikeWhereInput {
  AND: [LikeWhereInput!]
  author: UserWhereInput
  authorId: IntNullableFilter
  book: BookWhereInput
  bookId: IntNullableFilter
  chapter: ChapterWhereInput
  chapterId: IntNullableFilter
  comment: CommentWhereInput
  commentId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  review: ReviewWhereInput
  reviewId: IntNullableFilter
}

input LikeWhereUniqueInput {
  id: Int
}

type Mutation {
  addBookToFavorites(bookId: Int, userId: Int): User!
  createOneBook(data: BookCreateInput!): Book!
  createOneChapter(data: ChapterCreateInput!): Chapter!
  createOneComment(data: CommentCreateInput!): Comment!
  createOneGenre(data: GenreCreateInput!): Genre!
  createOneLike(data: LikeCreateInput!): Like!
  createOneReview(data: ReviewCreateInput!): Review!
  createOneTag(data: TagCreateInput!): Tag!
  createOneUser(data: UserCreateInput!): User!
  createReview(authorId: Int, bookId: Int, message: String, stars: Int): Review!
  deleteManyBook(where: BookWhereInput): BatchPayload!
  deleteManyChapter(where: ChapterWhereInput): BatchPayload!
  deleteOneBook(where: BookWhereUniqueInput!): Book
  deleteOneChapter(where: ChapterWhereUniqueInput!): Chapter
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOneGenre(where: GenreWhereUniqueInput!): Genre
  deleteOneLike(where: LikeWhereUniqueInput!): Like
  deleteOneReview(where: ReviewWhereUniqueInput!): Review
  deleteOneTag(where: TagWhereUniqueInput!): Tag
  deleteOneUser(where: UserWhereUniqueInput!): User
  followUser(followerId: Int, followingId: Int): User!
  incrementBookViews(bookId: Int): Book!
  incrementChapterViews(chapterId: Int): Chapter!
  login(email: String, password: String): AuthPayload!
  newBookDonation(amount: Int, bookId: Int, message: String): Donation!
  newChapterDonation(amount: Int, chapterId: Int, message: String): Donation!
  removeBookFromFavorites(bookId: Int, userId: Int): User!
  replyToComment(body: String, commentId: Int, userId: Int): Comment!
  sendBookComment(body: String, bookId: Int, userId: Int): Comment!
  sendChapterComment(body: String, chapterId: Int, userId: Int): Comment!
  setChapterLike(authorId: Int, chapterId: Int): Like!
  setCommentLike(authorId: Int, commentId: Int): Like!
  setReview(authorUsername: String, bookId: Int, id: Int, stars: Int): Review!
  setupStripe(stripeCode: String): Donation!
  signup(email: String, password: String, username: String): AuthPayload!
  unfollowUser(followerId: Int, followingId: Int): User!
  updateManyBook(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  updateManyChapter(data: ChapterUpdateManyMutationInput!, where: ChapterWhereInput): BatchPayload!
  updateOneBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateOneChapter(data: ChapterUpdateInput!, where: ChapterWhereUniqueInput!): Chapter
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateOneGenre(data: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre
  updateOneLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
  updateOneReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateOneTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneReview(create: ReviewCreateInput!, update: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  book(where: BookWhereUniqueInput!): Book
  books(orderBy: [BookOrderByInput!], skip: Int, where: BookWhereInput): [Book!]!
  chapter(where: ChapterWhereUniqueInput!): Chapter
  chapterByBook(bookId: Int, skip: Int): [Chapter!]!
  chapters(orderBy: [ChapterOrderByInput!], skip: Int, where: ChapterWhereInput): [Chapter!]!
  chaptersFeed(skip: Int, userId: Int): [Chapter!]!
  chaptersFeedByAuthor(authorId: Int, skip: Int): [Chapter!]!
  chaptersFeedByAuthorCount(authorId: Int): Int!
  chaptersFeedCount(userId: Int): Int!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(orderBy: [CommentOrderByInput!], skip: Int, where: CommentWhereInput): [Comment!]!
  donation(where: DonationWhereUniqueInput!): Donation
  donations(skip: Int): [Donation!]!
  genres(skip: Int): [Genre!]!
  likes(skip: Int): [Like!]!
  me: User
  review(where: ReviewWhereUniqueInput!): Review
  reviews(skip: Int): [Review!]!
  tags(skip: Int): [Tag!]!
  user(where: UserWhereUniqueInput!): User
  users(skip: Int): [User!]!
}

type Review {
  author: User
  book: Book
  chapter: Chapter
  createdAt: DateTime!
  id: Int!
  likes: [Like!]!
  message: String
  stars: Int!
}

input ReviewCreateInput {
  author: UserCreateOneWithoutReviewsInput
  book: BookCreateOneWithoutReviewsInput
  chapter: ChapterCreateOneWithoutReviewsInput
  createdAt: DateTime
  likes: LikeCreateManyWithoutReviewInput
  message: String
  stars: Int!
}

input ReviewCreateManyWithoutAuthorInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutAuthorInput!]
}

input ReviewCreateManyWithoutBookInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutBookInput!]
}

input ReviewCreateManyWithoutChapterInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutChapterInput!]
}

input ReviewCreateOneWithoutLikesInput {
  connect: ReviewWhereUniqueInput
  create: ReviewCreateWithoutLikesInput
}

input ReviewCreateWithoutAuthorInput {
  book: BookCreateOneWithoutReviewsInput
  chapter: ChapterCreateOneWithoutReviewsInput
  createdAt: DateTime
  likes: LikeCreateManyWithoutReviewInput
  message: String
  stars: Int!
}

input ReviewCreateWithoutBookInput {
  author: UserCreateOneWithoutReviewsInput
  chapter: ChapterCreateOneWithoutReviewsInput
  createdAt: DateTime
  likes: LikeCreateManyWithoutReviewInput
  message: String
  stars: Int!
}

input ReviewCreateWithoutChapterInput {
  author: UserCreateOneWithoutReviewsInput
  book: BookCreateOneWithoutReviewsInput
  createdAt: DateTime
  likes: LikeCreateManyWithoutReviewInput
  message: String
  stars: Int!
}

input ReviewCreateWithoutLikesInput {
  author: UserCreateOneWithoutReviewsInput
  book: BookCreateOneWithoutReviewsInput
  chapter: ChapterCreateOneWithoutReviewsInput
  createdAt: DateTime
  message: String
  stars: Int!
}

input ReviewListRelationFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput!]
  authorId: IntNullableFilter
  bookId: IntNullableFilter
  chapterId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  message: StringNullableFilter
  NOT: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  stars: IntFilter
}

input ReviewUpdateInput {
  author: UserUpdateOneWithoutReviewsInput
  book: BookUpdateOneWithoutReviewsInput
  chapter: ChapterUpdateOneWithoutReviewsInput
  createdAt: DateTime
  likes: LikeUpdateManyWithoutReviewInput
  message: String
  stars: Int
}

input ReviewUpdateManyDataInput {
  createdAt: DateTime
  message: String
  stars: Int
}

input ReviewUpdateManyWithoutAuthorInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutAuthorInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ReviewUpdateManyWithoutBookInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutBookInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutBookInput!]
}

input ReviewUpdateManyWithoutChapterInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutChapterInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutChapterInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutChapterInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  data: ReviewUpdateManyDataInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateOneWithoutLikesInput {
  connect: ReviewWhereUniqueInput
  create: ReviewCreateWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  update: ReviewUpdateWithoutLikesDataInput
  upsert: ReviewUpsertWithoutLikesInput
}

input ReviewUpdateWithoutAuthorDataInput {
  book: BookUpdateOneWithoutReviewsInput
  chapter: ChapterUpdateOneWithoutReviewsInput
  createdAt: DateTime
  likes: LikeUpdateManyWithoutReviewInput
  message: String
  stars: Int
}

input ReviewUpdateWithoutBookDataInput {
  author: UserUpdateOneWithoutReviewsInput
  chapter: ChapterUpdateOneWithoutReviewsInput
  createdAt: DateTime
  likes: LikeUpdateManyWithoutReviewInput
  message: String
  stars: Int
}

input ReviewUpdateWithoutChapterDataInput {
  author: UserUpdateOneWithoutReviewsInput
  book: BookUpdateOneWithoutReviewsInput
  createdAt: DateTime
  likes: LikeUpdateManyWithoutReviewInput
  message: String
  stars: Int
}

input ReviewUpdateWithoutLikesDataInput {
  author: UserUpdateOneWithoutReviewsInput
  book: BookUpdateOneWithoutReviewsInput
  chapter: ChapterUpdateOneWithoutReviewsInput
  createdAt: DateTime
  message: String
  stars: Int
}

input ReviewUpdateWithWhereUniqueWithoutAuthorInput {
  data: ReviewUpdateWithoutAuthorDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutBookInput {
  data: ReviewUpdateWithoutBookDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutChapterInput {
  data: ReviewUpdateWithoutChapterDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithoutLikesInput {
  create: ReviewCreateWithoutLikesInput!
  update: ReviewUpdateWithoutLikesDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutAuthorInput {
  create: ReviewCreateWithoutAuthorInput!
  update: ReviewUpdateWithoutAuthorDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutBookInput {
  create: ReviewCreateWithoutBookInput!
  update: ReviewUpdateWithoutBookDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutChapterInput {
  create: ReviewCreateWithoutChapterInput!
  update: ReviewUpdateWithoutChapterDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  author: UserWhereInput
  authorId: IntNullableFilter
  book: BookWhereInput
  bookId: IntNullableFilter
  chapter: ChapterWhereInput
  chapterId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  likes: LikeListRelationFilter
  message: StringNullableFilter
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  stars: IntFilter
}

input ReviewWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Tag {
  books: [Book!]!
  id: Int!
  label: String!
}

input TagCreateInput {
  books: BookCreateManyWithoutTagsInput
  label: String!
}

input TagCreateManyWithoutBooksInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutBooksInput!]
}

input TagCreateWithoutBooksInput {
  label: String!
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  id: IntFilter
  label: StringFilter
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
}

input TagUpdateInput {
  books: BookUpdateManyWithoutTagsInput
  label: String
}

input TagUpdateManyDataInput {
  label: String
}

input TagUpdateManyWithoutBooksInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutBooksInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutBooksInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutBooksInput!]
}

input TagUpdateManyWithWhereNestedInput {
  data: TagUpdateManyDataInput!
  where: TagScalarWhereInput!
}

input TagUpdateWithoutBooksDataInput {
  label: String
}

input TagUpdateWithWhereUniqueWithoutBooksInput {
  data: TagUpdateWithoutBooksDataInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutBooksInput {
  create: TagCreateWithoutBooksInput!
  update: TagUpdateWithoutBooksDataInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  books: BookListRelationFilter
  id: IntFilter
  label: StringFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: Int
}

type User {
  avatar: String
  bio: String
  books: [Book!]!
  chapters: [Chapter!]!
  comments: [Comment!]!
  email: String
  favoriteBooks: [Book!]!
  firstname: String
  followers: [User!]!
  following: [User!]!
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  id: Int!
  invited: [User!]!
  inviter: User
  likes: [Like!]!
  password: String
  reviews: [Review!]!
  stripeId: String
  username: String
}

input UserCreateInput {
  avatar: String
  bio: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserCreateManyWithoutInviterInput
  inviter: UserCreateOneWithoutInvitedInput
  likes: LikeCreateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationCreateManyWithoutRecipientInput
  reviews: ReviewCreateManyWithoutAuthorInput
  sentDonations: DonationCreateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserCreateManyWithoutFavoriteBooksInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFavoriteBooksInput!]
}

input UserCreateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowersInput!]
}

input UserCreateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateManyWithoutInviterInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutInviterInput!]
}

input UserCreateOneWithoutBooksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutBooksInput
}

input UserCreateOneWithoutChaptersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChaptersInput
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateOneWithoutInvitedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutInvitedInput
}

input UserCreateOneWithoutLikesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutLikesInput
}

input UserCreateOneWithoutReceivedDonationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReceivedDonationsInput
}

input UserCreateOneWithoutReviewsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReviewsInput
}

input UserCreateOneWithoutSentDonationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutSentDonationsInput
}

input UserCreateWithoutBooksInput {
  avatar: String
  bio: String
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserCreateManyWithoutInviterInput
  inviter: UserCreateOneWithoutInvitedInput
  likes: LikeCreateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationCreateManyWithoutRecipientInput
  reviews: ReviewCreateManyWithoutAuthorInput
  sentDonations: DonationCreateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserCreateWithoutChaptersInput {
  avatar: String
  bio: String
  books: BookCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserCreateManyWithoutInviterInput
  inviter: UserCreateOneWithoutInvitedInput
  likes: LikeCreateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationCreateManyWithoutRecipientInput
  reviews: ReviewCreateManyWithoutAuthorInput
  sentDonations: DonationCreateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserCreateWithoutCommentsInput {
  avatar: String
  bio: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserCreateManyWithoutInviterInput
  inviter: UserCreateOneWithoutInvitedInput
  likes: LikeCreateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationCreateManyWithoutRecipientInput
  reviews: ReviewCreateManyWithoutAuthorInput
  sentDonations: DonationCreateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserCreateWithoutFavoriteBooksInput {
  avatar: String
  bio: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserCreateManyWithoutInviterInput
  inviter: UserCreateOneWithoutInvitedInput
  likes: LikeCreateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationCreateManyWithoutRecipientInput
  reviews: ReviewCreateManyWithoutAuthorInput
  sentDonations: DonationCreateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserCreateWithoutFollowersInput {
  avatar: String
  bio: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserCreateManyWithoutInviterInput
  inviter: UserCreateOneWithoutInvitedInput
  likes: LikeCreateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationCreateManyWithoutRecipientInput
  reviews: ReviewCreateManyWithoutAuthorInput
  sentDonations: DonationCreateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserCreateWithoutFollowingInput {
  avatar: String
  bio: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserCreateManyWithoutInviterInput
  inviter: UserCreateOneWithoutInvitedInput
  likes: LikeCreateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationCreateManyWithoutRecipientInput
  reviews: ReviewCreateManyWithoutAuthorInput
  sentDonations: DonationCreateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserCreateWithoutInvitedInput {
  avatar: String
  bio: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  inviter: UserCreateOneWithoutInvitedInput
  likes: LikeCreateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationCreateManyWithoutRecipientInput
  reviews: ReviewCreateManyWithoutAuthorInput
  sentDonations: DonationCreateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserCreateWithoutInviterInput {
  avatar: String
  bio: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserCreateManyWithoutInviterInput
  likes: LikeCreateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationCreateManyWithoutRecipientInput
  reviews: ReviewCreateManyWithoutAuthorInput
  sentDonations: DonationCreateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserCreateWithoutLikesInput {
  avatar: String
  bio: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserCreateManyWithoutInviterInput
  inviter: UserCreateOneWithoutInvitedInput
  password: String
  receivedDonations: DonationCreateManyWithoutRecipientInput
  reviews: ReviewCreateManyWithoutAuthorInput
  sentDonations: DonationCreateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserCreateWithoutReceivedDonationsInput {
  avatar: String
  bio: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserCreateManyWithoutInviterInput
  inviter: UserCreateOneWithoutInvitedInput
  likes: LikeCreateManyWithoutAuthorInput
  password: String
  reviews: ReviewCreateManyWithoutAuthorInput
  sentDonations: DonationCreateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserCreateWithoutReviewsInput {
  avatar: String
  bio: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserCreateManyWithoutInviterInput
  inviter: UserCreateOneWithoutInvitedInput
  likes: LikeCreateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationCreateManyWithoutRecipientInput
  sentDonations: DonationCreateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserCreateWithoutSentDonationsInput {
  avatar: String
  bio: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserCreateManyWithoutInviterInput
  inviter: UserCreateOneWithoutInvitedInput
  likes: LikeCreateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationCreateManyWithoutRecipientInput
  reviews: ReviewCreateManyWithoutAuthorInput
  stripeId: String
  username: String
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  avatar: StringNullableFilter
  bio: StringNullableFilter
  email: StringNullableFilter
  firstname: StringNullableFilter
  fullname: StringNullableFilter
  getStreamToken: StringNullableFilter
  givenname: StringNullableFilter
  googleId: StringNullableFilter
  id: IntFilter
  inviterId: IntNullableFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: StringNullableFilter
  stripeId: StringNullableFilter
  username: StringNullableFilter
}

input UserUpdateInput {
  avatar: String
  bio: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserUpdateManyWithoutInviterInput
  inviter: UserUpdateOneWithoutInvitedInput
  likes: LikeUpdateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationUpdateManyWithoutRecipientInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  sentDonations: DonationUpdateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserUpdateManyDataInput {
  avatar: String
  bio: String
  email: String
  firstname: String
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  password: String
  stripeId: String
  username: String
}

input UserUpdateManyWithoutFavoriteBooksInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFavoriteBooksInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFavoriteBooksInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFavoriteBooksInput!]
}

input UserUpdateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
}

input UserUpdateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
}

input UserUpdateManyWithoutInviterInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutInviterInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutInviterInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutInviterInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneWithoutBooksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutBooksInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutBooksDataInput
  upsert: UserUpsertWithoutBooksInput
}

input UserUpdateOneWithoutChaptersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChaptersInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutChaptersDataInput
  upsert: UserUpsertWithoutChaptersInput
}

input UserUpdateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutInvitedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutInvitedInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutInvitedDataInput
  upsert: UserUpsertWithoutInvitedInput
}

input UserUpdateOneWithoutLikesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutLikesDataInput
  upsert: UserUpsertWithoutLikesInput
}

input UserUpdateOneWithoutReceivedDonationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReceivedDonationsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutReceivedDonationsDataInput
  upsert: UserUpsertWithoutReceivedDonationsInput
}

input UserUpdateOneWithoutReviewsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReviewsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateOneWithoutSentDonationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutSentDonationsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutSentDonationsDataInput
  upsert: UserUpsertWithoutSentDonationsInput
}

input UserUpdateWithoutBooksDataInput {
  avatar: String
  bio: String
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserUpdateManyWithoutInviterInput
  inviter: UserUpdateOneWithoutInvitedInput
  likes: LikeUpdateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationUpdateManyWithoutRecipientInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  sentDonations: DonationUpdateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserUpdateWithoutChaptersDataInput {
  avatar: String
  bio: String
  books: BookUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserUpdateManyWithoutInviterInput
  inviter: UserUpdateOneWithoutInvitedInput
  likes: LikeUpdateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationUpdateManyWithoutRecipientInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  sentDonations: DonationUpdateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserUpdateWithoutCommentsDataInput {
  avatar: String
  bio: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserUpdateManyWithoutInviterInput
  inviter: UserUpdateOneWithoutInvitedInput
  likes: LikeUpdateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationUpdateManyWithoutRecipientInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  sentDonations: DonationUpdateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserUpdateWithoutFavoriteBooksDataInput {
  avatar: String
  bio: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserUpdateManyWithoutInviterInput
  inviter: UserUpdateOneWithoutInvitedInput
  likes: LikeUpdateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationUpdateManyWithoutRecipientInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  sentDonations: DonationUpdateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserUpdateWithoutFollowersDataInput {
  avatar: String
  bio: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserUpdateManyWithoutInviterInput
  inviter: UserUpdateOneWithoutInvitedInput
  likes: LikeUpdateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationUpdateManyWithoutRecipientInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  sentDonations: DonationUpdateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserUpdateWithoutFollowingDataInput {
  avatar: String
  bio: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserUpdateManyWithoutInviterInput
  inviter: UserUpdateOneWithoutInvitedInput
  likes: LikeUpdateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationUpdateManyWithoutRecipientInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  sentDonations: DonationUpdateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserUpdateWithoutInvitedDataInput {
  avatar: String
  bio: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  inviter: UserUpdateOneWithoutInvitedInput
  likes: LikeUpdateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationUpdateManyWithoutRecipientInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  sentDonations: DonationUpdateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserUpdateWithoutInviterDataInput {
  avatar: String
  bio: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserUpdateManyWithoutInviterInput
  likes: LikeUpdateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationUpdateManyWithoutRecipientInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  sentDonations: DonationUpdateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserUpdateWithoutLikesDataInput {
  avatar: String
  bio: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserUpdateManyWithoutInviterInput
  inviter: UserUpdateOneWithoutInvitedInput
  password: String
  receivedDonations: DonationUpdateManyWithoutRecipientInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  sentDonations: DonationUpdateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserUpdateWithoutReceivedDonationsDataInput {
  avatar: String
  bio: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserUpdateManyWithoutInviterInput
  inviter: UserUpdateOneWithoutInvitedInput
  likes: LikeUpdateManyWithoutAuthorInput
  password: String
  reviews: ReviewUpdateManyWithoutAuthorInput
  sentDonations: DonationUpdateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserUpdateWithoutReviewsDataInput {
  avatar: String
  bio: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserUpdateManyWithoutInviterInput
  inviter: UserUpdateOneWithoutInvitedInput
  likes: LikeUpdateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationUpdateManyWithoutRecipientInput
  sentDonations: DonationUpdateManyWithoutPayerInput
  stripeId: String
  username: String
}

input UserUpdateWithoutSentDonationsDataInput {
  avatar: String
  bio: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  invited: UserUpdateManyWithoutInviterInput
  inviter: UserUpdateOneWithoutInvitedInput
  likes: LikeUpdateManyWithoutAuthorInput
  password: String
  receivedDonations: DonationUpdateManyWithoutRecipientInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  stripeId: String
  username: String
}

input UserUpdateWithWhereUniqueWithoutFavoriteBooksInput {
  data: UserUpdateWithoutFavoriteBooksDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  data: UserUpdateWithoutFollowersDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  data: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutInviterInput {
  data: UserUpdateWithoutInviterDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutBooksInput {
  create: UserCreateWithoutBooksInput!
  update: UserUpdateWithoutBooksDataInput!
}

input UserUpsertWithoutChaptersInput {
  create: UserCreateWithoutChaptersInput!
  update: UserUpdateWithoutChaptersDataInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsDataInput!
}

input UserUpsertWithoutInvitedInput {
  create: UserCreateWithoutInvitedInput!
  update: UserUpdateWithoutInvitedDataInput!
}

input UserUpsertWithoutLikesInput {
  create: UserCreateWithoutLikesInput!
  update: UserUpdateWithoutLikesDataInput!
}

input UserUpsertWithoutReceivedDonationsInput {
  create: UserCreateWithoutReceivedDonationsInput!
  update: UserUpdateWithoutReceivedDonationsDataInput!
}

input UserUpsertWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  update: UserUpdateWithoutReviewsDataInput!
}

input UserUpsertWithoutSentDonationsInput {
  create: UserCreateWithoutSentDonationsInput!
  update: UserUpdateWithoutSentDonationsDataInput!
}

input UserUpsertWithWhereUniqueWithoutFavoriteBooksInput {
  create: UserCreateWithoutFavoriteBooksInput!
  update: UserUpdateWithoutFavoriteBooksDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput!
  update: UserUpdateWithoutFollowersDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  update: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutInviterInput {
  create: UserCreateWithoutInviterInput!
  update: UserUpdateWithoutInviterDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  avatar: StringNullableFilter
  bio: StringNullableFilter
  books: BookListRelationFilter
  chapters: ChapterListRelationFilter
  comments: CommentListRelationFilter
  email: StringNullableFilter
  favoriteBooks: BookListRelationFilter
  firstname: StringNullableFilter
  followers: UserListRelationFilter
  following: UserListRelationFilter
  fullname: StringNullableFilter
  getStreamToken: StringNullableFilter
  givenname: StringNullableFilter
  googleId: StringNullableFilter
  id: IntFilter
  invited: UserListRelationFilter
  inviter: UserWhereInput
  inviterId: IntNullableFilter
  likes: LikeListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringNullableFilter
  receivedDonations: DonationListRelationFilter
  reviews: ReviewListRelationFilter
  sentDonations: DonationListRelationFilter
  stripeId: StringNullableFilter
  username: StringNullableFilter
}

input UserWhereUniqueInput {
  email: String
  getStreamToken: String
  googleId: String
  id: Int
  stripeId: String
  username: String
}
