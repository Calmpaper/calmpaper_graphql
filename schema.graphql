### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Book {
  author: User
  chapters(orderBy: ChapterOrderByInput): [Chapter!]!
  comments(orderBy: CommentOrderByInput, skip: Int): [Comment!]!
  createdAt: DateTime!
  description: String!
  genres: [Genre!]!
  id: Int!
  image: String
  likes: [Like!]!
  name: String!
  readers: [User!]!
  reviews: [Review!]!
  tags: [Tag!]!
  views: Int!
}

input BookCreateInput {
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  Notification: NotificationCreateManyWithoutBookInput
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateManyWithoutAuthorInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutAuthorInput!]
}

input BookCreateManyWithoutGenresInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutGenresInput!]
}

input BookCreateManyWithoutReadersInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutReadersInput!]
}

input BookCreateManyWithoutTagsInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutTagsInput!]
}

input BookCreateOneWithoutChaptersInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutChaptersInput
}

input BookCreateOneWithoutCommentsInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutCommentsInput
}

input BookCreateOneWithoutLikesInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutLikesInput
}

input BookCreateOneWithoutNotificationInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutNotificationInput
}

input BookCreateOneWithoutReviewsInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutReviewsInput
}

input BookCreateWithoutAuthorInput {
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  Notification: NotificationCreateManyWithoutBookInput
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutChaptersInput {
  author: UserCreateOneWithoutBooksInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  Notification: NotificationCreateManyWithoutBookInput
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutCommentsInput {
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  Notification: NotificationCreateManyWithoutBookInput
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutGenresInput {
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  Notification: NotificationCreateManyWithoutBookInput
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutLikesInput {
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  genres: GenreCreateManyWithoutBooksInput
  image: String
  name: String!
  Notification: NotificationCreateManyWithoutBookInput
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutNotificationInput {
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutReadersInput {
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  Notification: NotificationCreateManyWithoutBookInput
  reviews: ReviewCreateManyWithoutBookInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutReviewsInput {
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  Notification: NotificationCreateManyWithoutBookInput
  readers: UserCreateManyWithoutFavoriteBooksInput
  tags: TagCreateManyWithoutBooksInput
  views: Int
}

input BookCreateWithoutTagsInput {
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  comments: CommentCreateManyWithoutBookInput
  createdAt: DateTime
  description: String!
  genres: GenreCreateManyWithoutBooksInput
  image: String
  likes: LikeCreateManyWithoutBookInput
  name: String!
  Notification: NotificationCreateManyWithoutBookInput
  readers: UserCreateManyWithoutFavoriteBooksInput
  reviews: ReviewCreateManyWithoutBookInput
  views: Int
}

input BookFilter {
  every: BookWhereInput
  none: BookWhereInput
  some: BookWhereInput
}

input BookOrderByInput {
  authorId: OrderByArg
  createdAt: OrderByArg
  description: OrderByArg
  id: OrderByArg
  image: OrderByArg
  name: OrderByArg
  views: OrderByArg
}

input BookScalarWhereInput {
  AND: [BookScalarWhereInput!]
  authorId: NullableIntFilter
  chapters: ChapterFilter
  comments: CommentFilter
  createdAt: DateTimeFilter
  description: StringFilter
  genres: GenreFilter
  id: IntFilter
  image: NullableStringFilter
  likes: LikeFilter
  name: StringFilter
  NOT: [BookScalarWhereInput!]
  Notification: NotificationFilter
  OR: [BookScalarWhereInput!]
  readers: UserFilter
  reviews: ReviewFilter
  tags: TagFilter
  views: IntFilter
}

input BookUpdateInput {
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  genres: GenreUpdateManyWithoutBooksInput
  id: Int
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  Notification: NotificationUpdateManyWithoutBookInput
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateManyDataInput {
  createdAt: DateTime
  description: String
  id: Int
  image: String
  name: String
  views: Int
}

input BookUpdateManyWithoutAuthorInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutAuthorInput!]
  delete: [BookWhereUniqueInput!]
  deleteMany: [BookScalarWhereInput!]
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutAuthorInput!]
}

input BookUpdateManyWithoutGenresInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutGenresInput!]
  delete: [BookWhereUniqueInput!]
  deleteMany: [BookScalarWhereInput!]
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutGenresInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutGenresInput!]
}

input BookUpdateManyWithoutReadersInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutReadersInput!]
  delete: [BookWhereUniqueInput!]
  deleteMany: [BookScalarWhereInput!]
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutReadersInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutReadersInput!]
}

input BookUpdateManyWithoutTagsInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutTagsInput!]
  delete: [BookWhereUniqueInput!]
  deleteMany: [BookScalarWhereInput!]
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutTagsInput!]
}

input BookUpdateManyWithWhereNestedInput {
  data: BookUpdateManyDataInput!
  where: BookScalarWhereInput!
}

input BookUpdateOneWithoutChaptersInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutChaptersInput
  delete: Boolean
  disconnect: Boolean
  update: BookUpdateWithoutChaptersDataInput
  upsert: BookUpsertWithoutChaptersInput
}

input BookUpdateOneWithoutCommentsInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: BookUpdateWithoutCommentsDataInput
  upsert: BookUpsertWithoutCommentsInput
}

input BookUpdateOneWithoutLikesInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  update: BookUpdateWithoutLikesDataInput
  upsert: BookUpsertWithoutLikesInput
}

input BookUpdateOneWithoutNotificationInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutNotificationInput
  delete: Boolean
  disconnect: Boolean
  update: BookUpdateWithoutNotificationDataInput
  upsert: BookUpsertWithoutNotificationInput
}

input BookUpdateOneWithoutReviewsInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutReviewsInput
  delete: Boolean
  disconnect: Boolean
  update: BookUpdateWithoutReviewsDataInput
  upsert: BookUpsertWithoutReviewsInput
}

input BookUpdateWithoutAuthorDataInput {
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  genres: GenreUpdateManyWithoutBooksInput
  id: Int
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  Notification: NotificationUpdateManyWithoutBookInput
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutChaptersDataInput {
  author: UserUpdateOneWithoutBooksInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  genres: GenreUpdateManyWithoutBooksInput
  id: Int
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  Notification: NotificationUpdateManyWithoutBookInput
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutCommentsDataInput {
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  genres: GenreUpdateManyWithoutBooksInput
  id: Int
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  Notification: NotificationUpdateManyWithoutBookInput
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutGenresDataInput {
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  id: Int
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  Notification: NotificationUpdateManyWithoutBookInput
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutLikesDataInput {
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  genres: GenreUpdateManyWithoutBooksInput
  id: Int
  image: String
  name: String
  Notification: NotificationUpdateManyWithoutBookInput
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutNotificationDataInput {
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  genres: GenreUpdateManyWithoutBooksInput
  id: Int
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutReadersDataInput {
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  genres: GenreUpdateManyWithoutBooksInput
  id: Int
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  Notification: NotificationUpdateManyWithoutBookInput
  reviews: ReviewUpdateManyWithoutBookInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutReviewsDataInput {
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  genres: GenreUpdateManyWithoutBooksInput
  id: Int
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  Notification: NotificationUpdateManyWithoutBookInput
  readers: UserUpdateManyWithoutFavoriteBooksInput
  tags: TagUpdateManyWithoutBooksInput
  views: Int
}

input BookUpdateWithoutTagsDataInput {
  author: UserUpdateOneWithoutBooksInput
  chapters: ChapterUpdateManyWithoutBookInput
  comments: CommentUpdateManyWithoutBookInput
  createdAt: DateTime
  description: String
  genres: GenreUpdateManyWithoutBooksInput
  id: Int
  image: String
  likes: LikeUpdateManyWithoutBookInput
  name: String
  Notification: NotificationUpdateManyWithoutBookInput
  readers: UserUpdateManyWithoutFavoriteBooksInput
  reviews: ReviewUpdateManyWithoutBookInput
  views: Int
}

input BookUpdateWithWhereUniqueWithoutAuthorInput {
  data: BookUpdateWithoutAuthorDataInput!
  where: BookWhereUniqueInput!
}

input BookUpdateWithWhereUniqueWithoutGenresInput {
  data: BookUpdateWithoutGenresDataInput!
  where: BookWhereUniqueInput!
}

input BookUpdateWithWhereUniqueWithoutReadersInput {
  data: BookUpdateWithoutReadersDataInput!
  where: BookWhereUniqueInput!
}

input BookUpdateWithWhereUniqueWithoutTagsInput {
  data: BookUpdateWithoutTagsDataInput!
  where: BookWhereUniqueInput!
}

input BookUpsertWithoutChaptersInput {
  create: BookCreateWithoutChaptersInput!
  update: BookUpdateWithoutChaptersDataInput!
}

input BookUpsertWithoutCommentsInput {
  create: BookCreateWithoutCommentsInput!
  update: BookUpdateWithoutCommentsDataInput!
}

input BookUpsertWithoutLikesInput {
  create: BookCreateWithoutLikesInput!
  update: BookUpdateWithoutLikesDataInput!
}

input BookUpsertWithoutNotificationInput {
  create: BookCreateWithoutNotificationInput!
  update: BookUpdateWithoutNotificationDataInput!
}

input BookUpsertWithoutReviewsInput {
  create: BookCreateWithoutReviewsInput!
  update: BookUpdateWithoutReviewsDataInput!
}

input BookUpsertWithWhereUniqueWithoutAuthorInput {
  create: BookCreateWithoutAuthorInput!
  update: BookUpdateWithoutAuthorDataInput!
  where: BookWhereUniqueInput!
}

input BookUpsertWithWhereUniqueWithoutGenresInput {
  create: BookCreateWithoutGenresInput!
  update: BookUpdateWithoutGenresDataInput!
  where: BookWhereUniqueInput!
}

input BookUpsertWithWhereUniqueWithoutReadersInput {
  create: BookCreateWithoutReadersInput!
  update: BookUpdateWithoutReadersDataInput!
  where: BookWhereUniqueInput!
}

input BookUpsertWithWhereUniqueWithoutTagsInput {
  create: BookCreateWithoutTagsInput!
  update: BookUpdateWithoutTagsDataInput!
  where: BookWhereUniqueInput!
}

input BookWhereInput {
  AND: [BookWhereInput!]
  author: UserWhereInput
  authorId: NullableIntFilter
  chapters: ChapterFilter
  comments: CommentFilter
  createdAt: DateTimeFilter
  description: StringFilter
  genres: GenreFilter
  id: IntFilter
  image: NullableStringFilter
  likes: LikeFilter
  name: StringFilter
  NOT: [BookWhereInput!]
  Notification: NotificationFilter
  OR: [BookWhereInput!]
  readers: UserFilter
  reviews: ReviewFilter
  tags: TagFilter
  views: IntFilter
}

input BookWhereUniqueInput {
  id: Int
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Chapter {
  author: User
  book: Book
  comments(orderBy: CommentOrderByInput, skip: Int): [Comment!]!
  content: String!
  createdAt: DateTime!
  id: Int!
  image: String
  likes: [Like!]!
  reviews: [Review!]!
  title: String
  views: Int!
}

input ChapterCreateInput {
  author: UserCreateOneWithoutChaptersInput
  book: BookCreateOneWithoutChaptersInput
  comments: CommentCreateManyWithoutChapterInput
  content: String!
  createdAt: DateTime
  image: String
  likes: LikeCreateManyWithoutChapterInput
  Notification: NotificationCreateManyWithoutChapterInput
  reviews: ReviewCreateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterCreateManyWithoutAuthorInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutAuthorInput!]
}

input ChapterCreateManyWithoutBookInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutBookInput!]
}

input ChapterCreateOneWithoutCommentsInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutCommentsInput
}

input ChapterCreateOneWithoutLikesInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutLikesInput
}

input ChapterCreateOneWithoutNotificationInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutNotificationInput
}

input ChapterCreateOneWithoutReviewsInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutReviewsInput
}

input ChapterCreateWithoutAuthorInput {
  book: BookCreateOneWithoutChaptersInput
  comments: CommentCreateManyWithoutChapterInput
  content: String!
  createdAt: DateTime
  image: String
  likes: LikeCreateManyWithoutChapterInput
  Notification: NotificationCreateManyWithoutChapterInput
  reviews: ReviewCreateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterCreateWithoutBookInput {
  author: UserCreateOneWithoutChaptersInput
  comments: CommentCreateManyWithoutChapterInput
  content: String!
  createdAt: DateTime
  image: String
  likes: LikeCreateManyWithoutChapterInput
  Notification: NotificationCreateManyWithoutChapterInput
  reviews: ReviewCreateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterCreateWithoutCommentsInput {
  author: UserCreateOneWithoutChaptersInput
  book: BookCreateOneWithoutChaptersInput
  content: String!
  createdAt: DateTime
  image: String
  likes: LikeCreateManyWithoutChapterInput
  Notification: NotificationCreateManyWithoutChapterInput
  reviews: ReviewCreateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterCreateWithoutLikesInput {
  author: UserCreateOneWithoutChaptersInput
  book: BookCreateOneWithoutChaptersInput
  comments: CommentCreateManyWithoutChapterInput
  content: String!
  createdAt: DateTime
  image: String
  Notification: NotificationCreateManyWithoutChapterInput
  reviews: ReviewCreateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterCreateWithoutNotificationInput {
  author: UserCreateOneWithoutChaptersInput
  book: BookCreateOneWithoutChaptersInput
  comments: CommentCreateManyWithoutChapterInput
  content: String!
  createdAt: DateTime
  image: String
  likes: LikeCreateManyWithoutChapterInput
  reviews: ReviewCreateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterCreateWithoutReviewsInput {
  author: UserCreateOneWithoutChaptersInput
  book: BookCreateOneWithoutChaptersInput
  comments: CommentCreateManyWithoutChapterInput
  content: String!
  createdAt: DateTime
  image: String
  likes: LikeCreateManyWithoutChapterInput
  Notification: NotificationCreateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterFilter {
  every: ChapterWhereInput
  none: ChapterWhereInput
  some: ChapterWhereInput
}

input ChapterOrderByInput {
  authorId: OrderByArg
  bookId: OrderByArg
  content: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  image: OrderByArg
  title: OrderByArg
  views: OrderByArg
}

input ChapterScalarWhereInput {
  AND: [ChapterScalarWhereInput!]
  authorId: NullableIntFilter
  bookId: NullableIntFilter
  comments: CommentFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  image: NullableStringFilter
  likes: LikeFilter
  NOT: [ChapterScalarWhereInput!]
  Notification: NotificationFilter
  OR: [ChapterScalarWhereInput!]
  reviews: ReviewFilter
  title: NullableStringFilter
  views: IntFilter
}

input ChapterUpdateInput {
  author: UserUpdateOneWithoutChaptersInput
  book: BookUpdateOneWithoutChaptersInput
  comments: CommentUpdateManyWithoutChapterInput
  content: String
  createdAt: DateTime
  id: Int
  image: String
  likes: LikeUpdateManyWithoutChapterInput
  Notification: NotificationUpdateManyWithoutChapterInput
  reviews: ReviewUpdateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterUpdateManyDataInput {
  content: String
  createdAt: DateTime
  id: Int
  image: String
  title: String
  views: Int
}

input ChapterUpdateManyWithoutAuthorInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutAuthorInput!]
  delete: [ChapterWhereUniqueInput!]
  deleteMany: [ChapterScalarWhereInput!]
  disconnect: [ChapterWhereUniqueInput!]
  set: [ChapterWhereUniqueInput!]
  update: [ChapterUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ChapterUpdateManyWithWhereNestedInput!]
  upsert: [ChapterUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ChapterUpdateManyWithoutBookInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutBookInput!]
  delete: [ChapterWhereUniqueInput!]
  deleteMany: [ChapterScalarWhereInput!]
  disconnect: [ChapterWhereUniqueInput!]
  set: [ChapterWhereUniqueInput!]
  update: [ChapterUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [ChapterUpdateManyWithWhereNestedInput!]
  upsert: [ChapterUpsertWithWhereUniqueWithoutBookInput!]
}

input ChapterUpdateManyWithWhereNestedInput {
  data: ChapterUpdateManyDataInput!
  where: ChapterScalarWhereInput!
}

input ChapterUpdateOneWithoutCommentsInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: ChapterUpdateWithoutCommentsDataInput
  upsert: ChapterUpsertWithoutCommentsInput
}

input ChapterUpdateOneWithoutLikesInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  update: ChapterUpdateWithoutLikesDataInput
  upsert: ChapterUpsertWithoutLikesInput
}

input ChapterUpdateOneWithoutNotificationInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutNotificationInput
  delete: Boolean
  disconnect: Boolean
  update: ChapterUpdateWithoutNotificationDataInput
  upsert: ChapterUpsertWithoutNotificationInput
}

input ChapterUpdateOneWithoutReviewsInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutReviewsInput
  delete: Boolean
  disconnect: Boolean
  update: ChapterUpdateWithoutReviewsDataInput
  upsert: ChapterUpsertWithoutReviewsInput
}

input ChapterUpdateWithoutAuthorDataInput {
  book: BookUpdateOneWithoutChaptersInput
  comments: CommentUpdateManyWithoutChapterInput
  content: String
  createdAt: DateTime
  id: Int
  image: String
  likes: LikeUpdateManyWithoutChapterInput
  Notification: NotificationUpdateManyWithoutChapterInput
  reviews: ReviewUpdateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterUpdateWithoutBookDataInput {
  author: UserUpdateOneWithoutChaptersInput
  comments: CommentUpdateManyWithoutChapterInput
  content: String
  createdAt: DateTime
  id: Int
  image: String
  likes: LikeUpdateManyWithoutChapterInput
  Notification: NotificationUpdateManyWithoutChapterInput
  reviews: ReviewUpdateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterUpdateWithoutCommentsDataInput {
  author: UserUpdateOneWithoutChaptersInput
  book: BookUpdateOneWithoutChaptersInput
  content: String
  createdAt: DateTime
  id: Int
  image: String
  likes: LikeUpdateManyWithoutChapterInput
  Notification: NotificationUpdateManyWithoutChapterInput
  reviews: ReviewUpdateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterUpdateWithoutLikesDataInput {
  author: UserUpdateOneWithoutChaptersInput
  book: BookUpdateOneWithoutChaptersInput
  comments: CommentUpdateManyWithoutChapterInput
  content: String
  createdAt: DateTime
  id: Int
  image: String
  Notification: NotificationUpdateManyWithoutChapterInput
  reviews: ReviewUpdateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterUpdateWithoutNotificationDataInput {
  author: UserUpdateOneWithoutChaptersInput
  book: BookUpdateOneWithoutChaptersInput
  comments: CommentUpdateManyWithoutChapterInput
  content: String
  createdAt: DateTime
  id: Int
  image: String
  likes: LikeUpdateManyWithoutChapterInput
  reviews: ReviewUpdateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterUpdateWithoutReviewsDataInput {
  author: UserUpdateOneWithoutChaptersInput
  book: BookUpdateOneWithoutChaptersInput
  comments: CommentUpdateManyWithoutChapterInput
  content: String
  createdAt: DateTime
  id: Int
  image: String
  likes: LikeUpdateManyWithoutChapterInput
  Notification: NotificationUpdateManyWithoutChapterInput
  title: String
  views: Int
}

input ChapterUpdateWithWhereUniqueWithoutAuthorInput {
  data: ChapterUpdateWithoutAuthorDataInput!
  where: ChapterWhereUniqueInput!
}

input ChapterUpdateWithWhereUniqueWithoutBookInput {
  data: ChapterUpdateWithoutBookDataInput!
  where: ChapterWhereUniqueInput!
}

input ChapterUpsertWithoutCommentsInput {
  create: ChapterCreateWithoutCommentsInput!
  update: ChapterUpdateWithoutCommentsDataInput!
}

input ChapterUpsertWithoutLikesInput {
  create: ChapterCreateWithoutLikesInput!
  update: ChapterUpdateWithoutLikesDataInput!
}

input ChapterUpsertWithoutNotificationInput {
  create: ChapterCreateWithoutNotificationInput!
  update: ChapterUpdateWithoutNotificationDataInput!
}

input ChapterUpsertWithoutReviewsInput {
  create: ChapterCreateWithoutReviewsInput!
  update: ChapterUpdateWithoutReviewsDataInput!
}

input ChapterUpsertWithWhereUniqueWithoutAuthorInput {
  create: ChapterCreateWithoutAuthorInput!
  update: ChapterUpdateWithoutAuthorDataInput!
  where: ChapterWhereUniqueInput!
}

input ChapterUpsertWithWhereUniqueWithoutBookInput {
  create: ChapterCreateWithoutBookInput!
  update: ChapterUpdateWithoutBookDataInput!
  where: ChapterWhereUniqueInput!
}

input ChapterWhereInput {
  AND: [ChapterWhereInput!]
  author: UserWhereInput
  authorId: NullableIntFilter
  book: BookWhereInput
  bookId: NullableIntFilter
  comments: CommentFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  image: NullableStringFilter
  likes: LikeFilter
  NOT: [ChapterWhereInput!]
  Notification: NotificationFilter
  OR: [ChapterWhereInput!]
  reviews: ReviewFilter
  title: NullableStringFilter
  views: IntFilter
}

input ChapterWhereUniqueInput {
  id: Int
}

type Comment {
  author: User
  body: String!
  book: Book
  chapter: Chapter
  createdAt: DateTime!
  id: Int!
  isChild: Boolean!
  likes: [Like!]!
  parent: Comment
  replies(orderBy: CommentOrderByInput): [Comment!]!
}

input CommentCreateInput {
  author: UserCreateOneWithoutCommentsInput
  body: String!
  book: BookCreateOneWithoutCommentsInput
  chapter: ChapterCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeCreateManyWithoutCommentInput
  Notification: NotificationCreateManyWithoutReviewInput
  parent: CommentCreateOneWithoutRepliesInput
  replies: CommentCreateManyWithoutParentInput
}

input CommentCreateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutAuthorInput!]
}

input CommentCreateManyWithoutBookInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutBookInput!]
}

input CommentCreateManyWithoutChapterInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutChapterInput!]
}

input CommentCreateManyWithoutParentInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutParentInput!]
}

input CommentCreateOneWithoutLikesInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutLikesInput
}

input CommentCreateOneWithoutNotificationInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutNotificationInput
}

input CommentCreateOneWithoutRepliesInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutRepliesInput
}

input CommentCreateWithoutAuthorInput {
  body: String!
  book: BookCreateOneWithoutCommentsInput
  chapter: ChapterCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeCreateManyWithoutCommentInput
  Notification: NotificationCreateManyWithoutReviewInput
  parent: CommentCreateOneWithoutRepliesInput
  replies: CommentCreateManyWithoutParentInput
}

input CommentCreateWithoutBookInput {
  author: UserCreateOneWithoutCommentsInput
  body: String!
  chapter: ChapterCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeCreateManyWithoutCommentInput
  Notification: NotificationCreateManyWithoutReviewInput
  parent: CommentCreateOneWithoutRepliesInput
  replies: CommentCreateManyWithoutParentInput
}

input CommentCreateWithoutChapterInput {
  author: UserCreateOneWithoutCommentsInput
  body: String!
  book: BookCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeCreateManyWithoutCommentInput
  Notification: NotificationCreateManyWithoutReviewInput
  parent: CommentCreateOneWithoutRepliesInput
  replies: CommentCreateManyWithoutParentInput
}

input CommentCreateWithoutLikesInput {
  author: UserCreateOneWithoutCommentsInput
  body: String!
  book: BookCreateOneWithoutCommentsInput
  chapter: ChapterCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  Notification: NotificationCreateManyWithoutReviewInput
  parent: CommentCreateOneWithoutRepliesInput
  replies: CommentCreateManyWithoutParentInput
}

input CommentCreateWithoutNotificationInput {
  author: UserCreateOneWithoutCommentsInput
  body: String!
  book: BookCreateOneWithoutCommentsInput
  chapter: ChapterCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeCreateManyWithoutCommentInput
  parent: CommentCreateOneWithoutRepliesInput
  replies: CommentCreateManyWithoutParentInput
}

input CommentCreateWithoutParentInput {
  author: UserCreateOneWithoutCommentsInput
  body: String!
  book: BookCreateOneWithoutCommentsInput
  chapter: ChapterCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeCreateManyWithoutCommentInput
  Notification: NotificationCreateManyWithoutReviewInput
  replies: CommentCreateManyWithoutParentInput
}

input CommentCreateWithoutRepliesInput {
  author: UserCreateOneWithoutCommentsInput
  body: String!
  book: BookCreateOneWithoutCommentsInput
  chapter: ChapterCreateOneWithoutCommentsInput
  createdAt: DateTime
  isChild: Boolean
  likes: LikeCreateManyWithoutCommentInput
  Notification: NotificationCreateManyWithoutReviewInput
  parent: CommentCreateOneWithoutRepliesInput
}

input CommentFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentOrderByInput {
  authorId: OrderByArg
  body: OrderByArg
  bookId: OrderByArg
  chapterId: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  isChild: OrderByArg
  parentId: OrderByArg
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  authorId: NullableIntFilter
  body: StringFilter
  bookId: NullableIntFilter
  chapterId: NullableIntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  isChild: BooleanFilter
  likes: LikeFilter
  NOT: [CommentScalarWhereInput!]
  Notification: NotificationFilter
  OR: [CommentScalarWhereInput!]
  parentId: NullableIntFilter
  replies: CommentFilter
}

input CommentUpdateInput {
  author: UserUpdateOneWithoutCommentsInput
  body: String
  book: BookUpdateOneWithoutCommentsInput
  chapter: ChapterUpdateOneWithoutCommentsInput
  createdAt: DateTime
  id: Int
  isChild: Boolean
  likes: LikeUpdateManyWithoutCommentInput
  Notification: NotificationUpdateManyWithoutReviewInput
  parent: CommentUpdateOneWithoutRepliesInput
  replies: CommentUpdateManyWithoutParentInput
}

input CommentUpdateManyDataInput {
  body: String
  createdAt: DateTime
  id: Int
  isChild: Boolean
}

input CommentUpdateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutAuthorInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutBookInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutBookInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutBookInput!]
}

input CommentUpdateManyWithoutChapterInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutChapterInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutChapterInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutChapterInput!]
}

input CommentUpdateManyWithoutParentInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutParentInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  data: CommentUpdateManyDataInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateOneWithoutLikesInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutLikesDataInput
  upsert: CommentUpsertWithoutLikesInput
}

input CommentUpdateOneWithoutNotificationInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutNotificationInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutNotificationDataInput
  upsert: CommentUpsertWithoutNotificationInput
}

input CommentUpdateOneWithoutRepliesInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutRepliesInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutRepliesDataInput
  upsert: CommentUpsertWithoutRepliesInput
}

input CommentUpdateWithoutAuthorDataInput {
  body: String
  book: BookUpdateOneWithoutCommentsInput
  chapter: ChapterUpdateOneWithoutCommentsInput
  createdAt: DateTime
  id: Int
  isChild: Boolean
  likes: LikeUpdateManyWithoutCommentInput
  Notification: NotificationUpdateManyWithoutReviewInput
  parent: CommentUpdateOneWithoutRepliesInput
  replies: CommentUpdateManyWithoutParentInput
}

input CommentUpdateWithoutBookDataInput {
  author: UserUpdateOneWithoutCommentsInput
  body: String
  chapter: ChapterUpdateOneWithoutCommentsInput
  createdAt: DateTime
  id: Int
  isChild: Boolean
  likes: LikeUpdateManyWithoutCommentInput
  Notification: NotificationUpdateManyWithoutReviewInput
  parent: CommentUpdateOneWithoutRepliesInput
  replies: CommentUpdateManyWithoutParentInput
}

input CommentUpdateWithoutChapterDataInput {
  author: UserUpdateOneWithoutCommentsInput
  body: String
  book: BookUpdateOneWithoutCommentsInput
  createdAt: DateTime
  id: Int
  isChild: Boolean
  likes: LikeUpdateManyWithoutCommentInput
  Notification: NotificationUpdateManyWithoutReviewInput
  parent: CommentUpdateOneWithoutRepliesInput
  replies: CommentUpdateManyWithoutParentInput
}

input CommentUpdateWithoutLikesDataInput {
  author: UserUpdateOneWithoutCommentsInput
  body: String
  book: BookUpdateOneWithoutCommentsInput
  chapter: ChapterUpdateOneWithoutCommentsInput
  createdAt: DateTime
  id: Int
  isChild: Boolean
  Notification: NotificationUpdateManyWithoutReviewInput
  parent: CommentUpdateOneWithoutRepliesInput
  replies: CommentUpdateManyWithoutParentInput
}

input CommentUpdateWithoutNotificationDataInput {
  author: UserUpdateOneWithoutCommentsInput
  body: String
  book: BookUpdateOneWithoutCommentsInput
  chapter: ChapterUpdateOneWithoutCommentsInput
  createdAt: DateTime
  id: Int
  isChild: Boolean
  likes: LikeUpdateManyWithoutCommentInput
  parent: CommentUpdateOneWithoutRepliesInput
  replies: CommentUpdateManyWithoutParentInput
}

input CommentUpdateWithoutParentDataInput {
  author: UserUpdateOneWithoutCommentsInput
  body: String
  book: BookUpdateOneWithoutCommentsInput
  chapter: ChapterUpdateOneWithoutCommentsInput
  createdAt: DateTime
  id: Int
  isChild: Boolean
  likes: LikeUpdateManyWithoutCommentInput
  Notification: NotificationUpdateManyWithoutReviewInput
  replies: CommentUpdateManyWithoutParentInput
}

input CommentUpdateWithoutRepliesDataInput {
  author: UserUpdateOneWithoutCommentsInput
  body: String
  book: BookUpdateOneWithoutCommentsInput
  chapter: ChapterUpdateOneWithoutCommentsInput
  createdAt: DateTime
  id: Int
  isChild: Boolean
  likes: LikeUpdateManyWithoutCommentInput
  Notification: NotificationUpdateManyWithoutReviewInput
  parent: CommentUpdateOneWithoutRepliesInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommentUpdateWithoutAuthorDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutBookInput {
  data: CommentUpdateWithoutBookDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutChapterInput {
  data: CommentUpdateWithoutChapterDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutParentInput {
  data: CommentUpdateWithoutParentDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithoutLikesInput {
  create: CommentCreateWithoutLikesInput!
  update: CommentUpdateWithoutLikesDataInput!
}

input CommentUpsertWithoutNotificationInput {
  create: CommentCreateWithoutNotificationInput!
  update: CommentUpdateWithoutNotificationDataInput!
}

input CommentUpsertWithoutRepliesInput {
  create: CommentCreateWithoutRepliesInput!
  update: CommentUpdateWithoutRepliesDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  update: CommentUpdateWithoutAuthorDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutBookInput {
  create: CommentCreateWithoutBookInput!
  update: CommentUpdateWithoutBookDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutChapterInput {
  create: CommentCreateWithoutChapterInput!
  update: CommentUpdateWithoutChapterDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutParentInput {
  create: CommentCreateWithoutParentInput!
  update: CommentUpdateWithoutParentDataInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  author: UserWhereInput
  authorId: NullableIntFilter
  body: StringFilter
  book: BookWhereInput
  bookId: NullableIntFilter
  chapter: ChapterWhereInput
  chapterId: NullableIntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  isChild: BooleanFilter
  likes: LikeFilter
  NOT: [CommentWhereInput!]
  Notification: NotificationFilter
  OR: [CommentWhereInput!]
  parent: CommentWhereInput
  parentId: NullableIntFilter
  replies: CommentFilter
}

input CommentWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Genre {
  books: [Book!]!
  id: Int!
  label: String!
}

input GenreCreateInput {
  books: BookCreateManyWithoutGenresInput
  label: String!
}

input GenreCreateManyWithoutBooksInput {
  connect: [GenreWhereUniqueInput!]
  create: [GenreCreateWithoutBooksInput!]
}

input GenreCreateWithoutBooksInput {
  label: String!
}

input GenreFilter {
  every: GenreWhereInput
  none: GenreWhereInput
  some: GenreWhereInput
}

input GenreScalarWhereInput {
  AND: [GenreScalarWhereInput!]
  books: BookFilter
  id: IntFilter
  label: StringFilter
  NOT: [GenreScalarWhereInput!]
  OR: [GenreScalarWhereInput!]
}

input GenreUpdateInput {
  books: BookUpdateManyWithoutGenresInput
  id: Int
  label: String
}

input GenreUpdateManyDataInput {
  id: Int
  label: String
}

input GenreUpdateManyWithoutBooksInput {
  connect: [GenreWhereUniqueInput!]
  create: [GenreCreateWithoutBooksInput!]
  delete: [GenreWhereUniqueInput!]
  deleteMany: [GenreScalarWhereInput!]
  disconnect: [GenreWhereUniqueInput!]
  set: [GenreWhereUniqueInput!]
  update: [GenreUpdateWithWhereUniqueWithoutBooksInput!]
  updateMany: [GenreUpdateManyWithWhereNestedInput!]
  upsert: [GenreUpsertWithWhereUniqueWithoutBooksInput!]
}

input GenreUpdateManyWithWhereNestedInput {
  data: GenreUpdateManyDataInput!
  where: GenreScalarWhereInput!
}

input GenreUpdateWithoutBooksDataInput {
  id: Int
  label: String
}

input GenreUpdateWithWhereUniqueWithoutBooksInput {
  data: GenreUpdateWithoutBooksDataInput!
  where: GenreWhereUniqueInput!
}

input GenreUpsertWithWhereUniqueWithoutBooksInput {
  create: GenreCreateWithoutBooksInput!
  update: GenreUpdateWithoutBooksDataInput!
  where: GenreWhereUniqueInput!
}

input GenreWhereInput {
  AND: [GenreWhereInput!]
  books: BookFilter
  id: IntFilter
  label: StringFilter
  NOT: [GenreWhereInput!]
  OR: [GenreWhereInput!]
}

input GenreWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Like {
  author: User
  book: Book
  chapter: Chapter
  comment: Comment
  createdAt: DateTime!
  id: Int!
  review: Review
}

input LikeCreateInput {
  author: UserCreateOneWithoutLikesInput
  book: BookCreateOneWithoutLikesInput
  chapter: ChapterCreateOneWithoutLikesInput
  comment: CommentCreateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewCreateOneWithoutLikesInput
}

input LikeCreateManyWithoutAuthorInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutAuthorInput!]
}

input LikeCreateManyWithoutBookInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutBookInput!]
}

input LikeCreateManyWithoutChapterInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutChapterInput!]
}

input LikeCreateManyWithoutCommentInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutCommentInput!]
}

input LikeCreateManyWithoutReviewInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutReviewInput!]
}

input LikeCreateWithoutAuthorInput {
  book: BookCreateOneWithoutLikesInput
  chapter: ChapterCreateOneWithoutLikesInput
  comment: CommentCreateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewCreateOneWithoutLikesInput
}

input LikeCreateWithoutBookInput {
  author: UserCreateOneWithoutLikesInput
  chapter: ChapterCreateOneWithoutLikesInput
  comment: CommentCreateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewCreateOneWithoutLikesInput
}

input LikeCreateWithoutChapterInput {
  author: UserCreateOneWithoutLikesInput
  book: BookCreateOneWithoutLikesInput
  comment: CommentCreateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewCreateOneWithoutLikesInput
}

input LikeCreateWithoutCommentInput {
  author: UserCreateOneWithoutLikesInput
  book: BookCreateOneWithoutLikesInput
  chapter: ChapterCreateOneWithoutLikesInput
  createdAt: DateTime
  review: ReviewCreateOneWithoutLikesInput
}

input LikeCreateWithoutReviewInput {
  author: UserCreateOneWithoutLikesInput
  book: BookCreateOneWithoutLikesInput
  chapter: ChapterCreateOneWithoutLikesInput
  comment: CommentCreateOneWithoutLikesInput
  createdAt: DateTime
}

input LikeFilter {
  every: LikeWhereInput
  none: LikeWhereInput
  some: LikeWhereInput
}

input LikeScalarWhereInput {
  AND: [LikeScalarWhereInput!]
  authorId: NullableIntFilter
  bookId: NullableIntFilter
  chapterId: NullableIntFilter
  commentId: NullableIntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  reviewId: NullableIntFilter
}

input LikeUpdateInput {
  author: UserUpdateOneWithoutLikesInput
  book: BookUpdateOneWithoutLikesInput
  chapter: ChapterUpdateOneWithoutLikesInput
  comment: CommentUpdateOneWithoutLikesInput
  createdAt: DateTime
  id: Int
  review: ReviewUpdateOneWithoutLikesInput
}

input LikeUpdateManyDataInput {
  createdAt: DateTime
  id: Int
}

input LikeUpdateManyWithoutAuthorInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutAuthorInput!]
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutAuthorInput!]
}

input LikeUpdateManyWithoutBookInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutBookInput!]
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutBookInput!]
}

input LikeUpdateManyWithoutChapterInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutChapterInput!]
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutChapterInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutChapterInput!]
}

input LikeUpdateManyWithoutCommentInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutCommentInput!]
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutCommentInput!]
}

input LikeUpdateManyWithoutReviewInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutReviewInput!]
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutReviewInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutReviewInput!]
}

input LikeUpdateManyWithWhereNestedInput {
  data: LikeUpdateManyDataInput!
  where: LikeScalarWhereInput!
}

input LikeUpdateWithoutAuthorDataInput {
  book: BookUpdateOneWithoutLikesInput
  chapter: ChapterUpdateOneWithoutLikesInput
  comment: CommentUpdateOneWithoutLikesInput
  createdAt: DateTime
  id: Int
  review: ReviewUpdateOneWithoutLikesInput
}

input LikeUpdateWithoutBookDataInput {
  author: UserUpdateOneWithoutLikesInput
  chapter: ChapterUpdateOneWithoutLikesInput
  comment: CommentUpdateOneWithoutLikesInput
  createdAt: DateTime
  id: Int
  review: ReviewUpdateOneWithoutLikesInput
}

input LikeUpdateWithoutChapterDataInput {
  author: UserUpdateOneWithoutLikesInput
  book: BookUpdateOneWithoutLikesInput
  comment: CommentUpdateOneWithoutLikesInput
  createdAt: DateTime
  id: Int
  review: ReviewUpdateOneWithoutLikesInput
}

input LikeUpdateWithoutCommentDataInput {
  author: UserUpdateOneWithoutLikesInput
  book: BookUpdateOneWithoutLikesInput
  chapter: ChapterUpdateOneWithoutLikesInput
  createdAt: DateTime
  id: Int
  review: ReviewUpdateOneWithoutLikesInput
}

input LikeUpdateWithoutReviewDataInput {
  author: UserUpdateOneWithoutLikesInput
  book: BookUpdateOneWithoutLikesInput
  chapter: ChapterUpdateOneWithoutLikesInput
  comment: CommentUpdateOneWithoutLikesInput
  createdAt: DateTime
  id: Int
}

input LikeUpdateWithWhereUniqueWithoutAuthorInput {
  data: LikeUpdateWithoutAuthorDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithWhereUniqueWithoutBookInput {
  data: LikeUpdateWithoutBookDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithWhereUniqueWithoutChapterInput {
  data: LikeUpdateWithoutChapterDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithWhereUniqueWithoutCommentInput {
  data: LikeUpdateWithoutCommentDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithWhereUniqueWithoutReviewInput {
  data: LikeUpdateWithoutReviewDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutAuthorInput {
  create: LikeCreateWithoutAuthorInput!
  update: LikeUpdateWithoutAuthorDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutBookInput {
  create: LikeCreateWithoutBookInput!
  update: LikeUpdateWithoutBookDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutChapterInput {
  create: LikeCreateWithoutChapterInput!
  update: LikeUpdateWithoutChapterDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutCommentInput {
  create: LikeCreateWithoutCommentInput!
  update: LikeUpdateWithoutCommentDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutReviewInput {
  create: LikeCreateWithoutReviewInput!
  update: LikeUpdateWithoutReviewDataInput!
  where: LikeWhereUniqueInput!
}

input LikeWhereInput {
  AND: [LikeWhereInput!]
  author: UserWhereInput
  authorId: NullableIntFilter
  book: BookWhereInput
  bookId: NullableIntFilter
  chapter: ChapterWhereInput
  chapterId: NullableIntFilter
  comment: CommentWhereInput
  commentId: NullableIntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  review: ReviewWhereInput
  reviewId: NullableIntFilter
}

input LikeWhereUniqueInput {
  id: Int
}

type Mutation {
  addBookToFavorites(bookId: Int, userId: Int): User!
  createOneBook(data: BookCreateInput!): Book!
  createOneChapter(data: ChapterCreateInput!): Chapter!
  createOneComment(data: CommentCreateInput!): Comment!
  createOneGenre(data: GenreCreateInput!): Genre!
  createOneLike(data: LikeCreateInput!): Like!
  createOneReview(data: ReviewCreateInput!): Review!
  createOneTag(data: TagCreateInput!): Tag!
  createOneUser(data: UserCreateInput!): User!
  createReview(authorId: Int, bookId: Int, message: String, stars: Int): Review!
  deleteOneBook(where: BookWhereUniqueInput!): Book
  deleteOneChapter(where: ChapterWhereUniqueInput!): Chapter
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOneGenre(where: GenreWhereUniqueInput!): Genre
  deleteOneLike(where: LikeWhereUniqueInput!): Like
  deleteOneReview(where: ReviewWhereUniqueInput!): Review
  deleteOneTag(where: TagWhereUniqueInput!): Tag
  deleteOneUser(where: UserWhereUniqueInput!): User
  incrementBookViews(bookId: Int): Book!
  incrementChapterViews(chapterId: Int): Chapter!
  removeBookFromFavorites(bookId: Int, userId: Int): User!
  replyToComment(body: String, commentId: Int, userId: Int): Comment!
  sendBookComment(body: String, bookId: Int, userId: Int): Comment!
  sendChapterComment(body: String, chapterId: Int, userId: Int): Comment!
  setChapterLike(authorId: Int, chapterId: Int): Like!
  setCommentLike(authorId: Int, commentId: Int): Like!
  setReview(authorUsername: String, bookId: Int, id: Int, stars: Int): Review!
  updateOneBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateOneChapter(data: ChapterUpdateInput!, where: ChapterWhereUniqueInput!): Chapter
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateOneGenre(data: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre
  updateOneLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
  updateOneReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateOneTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneReview(create: ReviewCreateInput!, update: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review!
}

type Notification {
  author: User
  book: Book
  chapter: Chapter
  id: Int!
  review: Comment
}

input NotificationCreateManyWithoutAuthorInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutAuthorInput!]
}

input NotificationCreateManyWithoutBookInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutBookInput!]
}

input NotificationCreateManyWithoutChapterInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutChapterInput!]
}

input NotificationCreateManyWithoutReviewInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutReviewInput!]
}

input NotificationCreateWithoutAuthorInput {
  book: BookCreateOneWithoutNotificationInput
  chapter: ChapterCreateOneWithoutNotificationInput
  review: CommentCreateOneWithoutNotificationInput
}

input NotificationCreateWithoutBookInput {
  author: UserCreateOneWithoutNotificationInput
  chapter: ChapterCreateOneWithoutNotificationInput
  review: CommentCreateOneWithoutNotificationInput
}

input NotificationCreateWithoutChapterInput {
  author: UserCreateOneWithoutNotificationInput
  book: BookCreateOneWithoutNotificationInput
  review: CommentCreateOneWithoutNotificationInput
}

input NotificationCreateWithoutReviewInput {
  author: UserCreateOneWithoutNotificationInput
  book: BookCreateOneWithoutNotificationInput
  chapter: ChapterCreateOneWithoutNotificationInput
}

input NotificationFilter {
  every: NotificationWhereInput
  none: NotificationWhereInput
  some: NotificationWhereInput
}

input NotificationScalarWhereInput {
  AND: [NotificationScalarWhereInput!]
  authorId: NullableIntFilter
  bookId: NullableIntFilter
  chapterId: NullableIntFilter
  id: IntFilter
  NOT: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  reviewId: NullableIntFilter
}

input NotificationUpdateManyDataInput {
  id: Int
}

input NotificationUpdateManyWithoutAuthorInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutAuthorInput!]
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutAuthorInput!]
}

input NotificationUpdateManyWithoutBookInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutBookInput!]
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutBookInput!]
}

input NotificationUpdateManyWithoutChapterInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutChapterInput!]
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutChapterInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutChapterInput!]
}

input NotificationUpdateManyWithoutReviewInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutReviewInput!]
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutReviewInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutReviewInput!]
}

input NotificationUpdateManyWithWhereNestedInput {
  data: NotificationUpdateManyDataInput!
  where: NotificationScalarWhereInput!
}

input NotificationUpdateWithoutAuthorDataInput {
  book: BookUpdateOneWithoutNotificationInput
  chapter: ChapterUpdateOneWithoutNotificationInput
  id: Int
  review: CommentUpdateOneWithoutNotificationInput
}

input NotificationUpdateWithoutBookDataInput {
  author: UserUpdateOneWithoutNotificationInput
  chapter: ChapterUpdateOneWithoutNotificationInput
  id: Int
  review: CommentUpdateOneWithoutNotificationInput
}

input NotificationUpdateWithoutChapterDataInput {
  author: UserUpdateOneWithoutNotificationInput
  book: BookUpdateOneWithoutNotificationInput
  id: Int
  review: CommentUpdateOneWithoutNotificationInput
}

input NotificationUpdateWithoutReviewDataInput {
  author: UserUpdateOneWithoutNotificationInput
  book: BookUpdateOneWithoutNotificationInput
  chapter: ChapterUpdateOneWithoutNotificationInput
  id: Int
}

input NotificationUpdateWithWhereUniqueWithoutAuthorInput {
  data: NotificationUpdateWithoutAuthorDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpdateWithWhereUniqueWithoutBookInput {
  data: NotificationUpdateWithoutBookDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpdateWithWhereUniqueWithoutChapterInput {
  data: NotificationUpdateWithoutChapterDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpdateWithWhereUniqueWithoutReviewInput {
  data: NotificationUpdateWithoutReviewDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpsertWithWhereUniqueWithoutAuthorInput {
  create: NotificationCreateWithoutAuthorInput!
  update: NotificationUpdateWithoutAuthorDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpsertWithWhereUniqueWithoutBookInput {
  create: NotificationCreateWithoutBookInput!
  update: NotificationUpdateWithoutBookDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpsertWithWhereUniqueWithoutChapterInput {
  create: NotificationCreateWithoutChapterInput!
  update: NotificationUpdateWithoutChapterDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpsertWithWhereUniqueWithoutReviewInput {
  create: NotificationCreateWithoutReviewInput!
  update: NotificationUpdateWithoutReviewDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  author: UserWhereInput
  authorId: NullableIntFilter
  book: BookWhereInput
  bookId: NullableIntFilter
  chapter: ChapterWhereInput
  chapterId: NullableIntFilter
  id: IntFilter
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  review: CommentWhereInput
  reviewId: NullableIntFilter
}

input NotificationWhereUniqueInput {
  id: Int
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Query {
  book(where: BookWhereUniqueInput!): Book
  books(orderBy: BookOrderByInput, skip: Int): [Book!]!
  chapter(where: ChapterWhereUniqueInput!): Chapter
  chapterByBook(bookId: Int, skip: Int): [Chapter!]!
  chapters(orderBy: ChapterOrderByInput, skip: Int, where: ChapterWhereInput): [Chapter!]!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(skip: Int): [Comment!]!
  genres(skip: Int): [Genre!]!
  likes(skip: Int): [Like!]!
  me: User
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(skip: Int): [Notification!]!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(skip: Int): [Review!]!
  tags(skip: Int): [Tag!]!
  user(where: UserWhereUniqueInput!): User
  users(skip: Int): [User!]!
}

type Review {
  author: User
  book: Book
  chapter: Chapter
  createdAt: DateTime!
  id: Int!
  likes: [Like!]!
  message: String
  stars: Int!
}

input ReviewCreateInput {
  author: UserCreateOneWithoutReviewsInput
  book: BookCreateOneWithoutReviewsInput
  chapter: ChapterCreateOneWithoutReviewsInput
  createdAt: DateTime
  likes: LikeCreateManyWithoutReviewInput
  message: String
  stars: Int!
}

input ReviewCreateManyWithoutAuthorInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutAuthorInput!]
}

input ReviewCreateManyWithoutBookInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutBookInput!]
}

input ReviewCreateManyWithoutChapterInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutChapterInput!]
}

input ReviewCreateOneWithoutLikesInput {
  connect: ReviewWhereUniqueInput
  create: ReviewCreateWithoutLikesInput
}

input ReviewCreateWithoutAuthorInput {
  book: BookCreateOneWithoutReviewsInput
  chapter: ChapterCreateOneWithoutReviewsInput
  createdAt: DateTime
  likes: LikeCreateManyWithoutReviewInput
  message: String
  stars: Int!
}

input ReviewCreateWithoutBookInput {
  author: UserCreateOneWithoutReviewsInput
  chapter: ChapterCreateOneWithoutReviewsInput
  createdAt: DateTime
  likes: LikeCreateManyWithoutReviewInput
  message: String
  stars: Int!
}

input ReviewCreateWithoutChapterInput {
  author: UserCreateOneWithoutReviewsInput
  book: BookCreateOneWithoutReviewsInput
  createdAt: DateTime
  likes: LikeCreateManyWithoutReviewInput
  message: String
  stars: Int!
}

input ReviewCreateWithoutLikesInput {
  author: UserCreateOneWithoutReviewsInput
  book: BookCreateOneWithoutReviewsInput
  chapter: ChapterCreateOneWithoutReviewsInput
  createdAt: DateTime
  message: String
  stars: Int!
}

input ReviewFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput!]
  authorId: NullableIntFilter
  bookId: NullableIntFilter
  chapterId: NullableIntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  likes: LikeFilter
  message: NullableStringFilter
  NOT: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  stars: IntFilter
}

input ReviewUpdateInput {
  author: UserUpdateOneWithoutReviewsInput
  book: BookUpdateOneWithoutReviewsInput
  chapter: ChapterUpdateOneWithoutReviewsInput
  createdAt: DateTime
  id: Int
  likes: LikeUpdateManyWithoutReviewInput
  message: String
  stars: Int
}

input ReviewUpdateManyDataInput {
  createdAt: DateTime
  id: Int
  message: String
  stars: Int
}

input ReviewUpdateManyWithoutAuthorInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutAuthorInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ReviewUpdateManyWithoutBookInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutBookInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutBookInput!]
}

input ReviewUpdateManyWithoutChapterInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutChapterInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutChapterInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutChapterInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  data: ReviewUpdateManyDataInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateOneWithoutLikesInput {
  connect: ReviewWhereUniqueInput
  create: ReviewCreateWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  update: ReviewUpdateWithoutLikesDataInput
  upsert: ReviewUpsertWithoutLikesInput
}

input ReviewUpdateWithoutAuthorDataInput {
  book: BookUpdateOneWithoutReviewsInput
  chapter: ChapterUpdateOneWithoutReviewsInput
  createdAt: DateTime
  id: Int
  likes: LikeUpdateManyWithoutReviewInput
  message: String
  stars: Int
}

input ReviewUpdateWithoutBookDataInput {
  author: UserUpdateOneWithoutReviewsInput
  chapter: ChapterUpdateOneWithoutReviewsInput
  createdAt: DateTime
  id: Int
  likes: LikeUpdateManyWithoutReviewInput
  message: String
  stars: Int
}

input ReviewUpdateWithoutChapterDataInput {
  author: UserUpdateOneWithoutReviewsInput
  book: BookUpdateOneWithoutReviewsInput
  createdAt: DateTime
  id: Int
  likes: LikeUpdateManyWithoutReviewInput
  message: String
  stars: Int
}

input ReviewUpdateWithoutLikesDataInput {
  author: UserUpdateOneWithoutReviewsInput
  book: BookUpdateOneWithoutReviewsInput
  chapter: ChapterUpdateOneWithoutReviewsInput
  createdAt: DateTime
  id: Int
  message: String
  stars: Int
}

input ReviewUpdateWithWhereUniqueWithoutAuthorInput {
  data: ReviewUpdateWithoutAuthorDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutBookInput {
  data: ReviewUpdateWithoutBookDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutChapterInput {
  data: ReviewUpdateWithoutChapterDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithoutLikesInput {
  create: ReviewCreateWithoutLikesInput!
  update: ReviewUpdateWithoutLikesDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutAuthorInput {
  create: ReviewCreateWithoutAuthorInput!
  update: ReviewUpdateWithoutAuthorDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutBookInput {
  create: ReviewCreateWithoutBookInput!
  update: ReviewUpdateWithoutBookDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutChapterInput {
  create: ReviewCreateWithoutChapterInput!
  update: ReviewUpdateWithoutChapterDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  author: UserWhereInput
  authorId: NullableIntFilter
  book: BookWhereInput
  bookId: NullableIntFilter
  chapter: ChapterWhereInput
  chapterId: NullableIntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  likes: LikeFilter
  message: NullableStringFilter
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  stars: IntFilter
}

input ReviewWhereUniqueInput {
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Tag {
  books: [Book!]!
  id: Int!
  label: String!
}

input TagCreateInput {
  books: BookCreateManyWithoutTagsInput
  label: String!
}

input TagCreateManyWithoutBooksInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutBooksInput!]
}

input TagCreateWithoutBooksInput {
  label: String!
}

input TagFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  books: BookFilter
  id: IntFilter
  label: StringFilter
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
}

input TagUpdateInput {
  books: BookUpdateManyWithoutTagsInput
  id: Int
  label: String
}

input TagUpdateManyDataInput {
  id: Int
  label: String
}

input TagUpdateManyWithoutBooksInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutBooksInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutBooksInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutBooksInput!]
}

input TagUpdateManyWithWhereNestedInput {
  data: TagUpdateManyDataInput!
  where: TagScalarWhereInput!
}

input TagUpdateWithoutBooksDataInput {
  id: Int
  label: String
}

input TagUpdateWithWhereUniqueWithoutBooksInput {
  data: TagUpdateWithoutBooksDataInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutBooksInput {
  create: TagCreateWithoutBooksInput!
  update: TagUpdateWithoutBooksDataInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  books: BookFilter
  id: IntFilter
  label: StringFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: Int
}

type User {
  avatar: String
  books: [Book!]!
  chapters: [Chapter!]!
  comments: [Comment!]!
  email: String
  favoriteBooks: [Book!]!
  firstname: String
  followers: [User!]!
  following: [User!]!
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  id: Int!
  likes: [Like!]!
  reviews: [Review!]!
  username: String
}

input UserCreateInput {
  avatar: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  likes: LikeCreateManyWithoutAuthorInput
  Notification: NotificationCreateManyWithoutAuthorInput
  reviews: ReviewCreateManyWithoutAuthorInput
  username: String
}

input UserCreateManyWithoutFavoriteBooksInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFavoriteBooksInput!]
}

input UserCreateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowersInput!]
}

input UserCreateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateOneWithoutBooksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutBooksInput
}

input UserCreateOneWithoutChaptersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChaptersInput
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateOneWithoutLikesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutLikesInput
}

input UserCreateOneWithoutNotificationInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutNotificationInput
}

input UserCreateOneWithoutReviewsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReviewsInput
}

input UserCreateWithoutBooksInput {
  avatar: String
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  likes: LikeCreateManyWithoutAuthorInput
  Notification: NotificationCreateManyWithoutAuthorInput
  reviews: ReviewCreateManyWithoutAuthorInput
  username: String
}

input UserCreateWithoutChaptersInput {
  avatar: String
  books: BookCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  likes: LikeCreateManyWithoutAuthorInput
  Notification: NotificationCreateManyWithoutAuthorInput
  reviews: ReviewCreateManyWithoutAuthorInput
  username: String
}

input UserCreateWithoutCommentsInput {
  avatar: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  likes: LikeCreateManyWithoutAuthorInput
  Notification: NotificationCreateManyWithoutAuthorInput
  reviews: ReviewCreateManyWithoutAuthorInput
  username: String
}

input UserCreateWithoutFavoriteBooksInput {
  avatar: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  likes: LikeCreateManyWithoutAuthorInput
  Notification: NotificationCreateManyWithoutAuthorInput
  reviews: ReviewCreateManyWithoutAuthorInput
  username: String
}

input UserCreateWithoutFollowersInput {
  avatar: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  likes: LikeCreateManyWithoutAuthorInput
  Notification: NotificationCreateManyWithoutAuthorInput
  reviews: ReviewCreateManyWithoutAuthorInput
  username: String
}

input UserCreateWithoutFollowingInput {
  avatar: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  likes: LikeCreateManyWithoutAuthorInput
  Notification: NotificationCreateManyWithoutAuthorInput
  reviews: ReviewCreateManyWithoutAuthorInput
  username: String
}

input UserCreateWithoutLikesInput {
  avatar: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  Notification: NotificationCreateManyWithoutAuthorInput
  reviews: ReviewCreateManyWithoutAuthorInput
  username: String
}

input UserCreateWithoutNotificationInput {
  avatar: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  likes: LikeCreateManyWithoutAuthorInput
  reviews: ReviewCreateManyWithoutAuthorInput
  username: String
}

input UserCreateWithoutReviewsInput {
  avatar: String
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookCreateManyWithoutReadersInput
  firstname: String
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  likes: LikeCreateManyWithoutAuthorInput
  Notification: NotificationCreateManyWithoutAuthorInput
  username: String
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  avatar: NullableStringFilter
  books: BookFilter
  chapters: ChapterFilter
  comments: CommentFilter
  email: NullableStringFilter
  favoriteBooks: BookFilter
  firstname: NullableStringFilter
  followers: UserFilter
  following: UserFilter
  fullname: NullableStringFilter
  getStreamToken: NullableStringFilter
  givenname: NullableStringFilter
  googleId: NullableStringFilter
  id: IntFilter
  likes: LikeFilter
  NOT: [UserScalarWhereInput!]
  Notification: NotificationFilter
  OR: [UserScalarWhereInput!]
  reviews: ReviewFilter
  username: NullableStringFilter
}

input UserUpdateInput {
  avatar: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  id: Int
  likes: LikeUpdateManyWithoutAuthorInput
  Notification: NotificationUpdateManyWithoutAuthorInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  username: String
}

input UserUpdateManyDataInput {
  avatar: String
  email: String
  firstname: String
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  id: Int
  username: String
}

input UserUpdateManyWithoutFavoriteBooksInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFavoriteBooksInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFavoriteBooksInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFavoriteBooksInput!]
}

input UserUpdateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
}

input UserUpdateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneWithoutBooksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutBooksInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutBooksDataInput
  upsert: UserUpsertWithoutBooksInput
}

input UserUpdateOneWithoutChaptersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChaptersInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutChaptersDataInput
  upsert: UserUpsertWithoutChaptersInput
}

input UserUpdateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutLikesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutLikesDataInput
  upsert: UserUpsertWithoutLikesInput
}

input UserUpdateOneWithoutNotificationInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutNotificationInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutNotificationDataInput
  upsert: UserUpsertWithoutNotificationInput
}

input UserUpdateOneWithoutReviewsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReviewsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateWithoutBooksDataInput {
  avatar: String
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  id: Int
  likes: LikeUpdateManyWithoutAuthorInput
  Notification: NotificationUpdateManyWithoutAuthorInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  username: String
}

input UserUpdateWithoutChaptersDataInput {
  avatar: String
  books: BookUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  id: Int
  likes: LikeUpdateManyWithoutAuthorInput
  Notification: NotificationUpdateManyWithoutAuthorInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  username: String
}

input UserUpdateWithoutCommentsDataInput {
  avatar: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  id: Int
  likes: LikeUpdateManyWithoutAuthorInput
  Notification: NotificationUpdateManyWithoutAuthorInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  username: String
}

input UserUpdateWithoutFavoriteBooksDataInput {
  avatar: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  id: Int
  likes: LikeUpdateManyWithoutAuthorInput
  Notification: NotificationUpdateManyWithoutAuthorInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  username: String
}

input UserUpdateWithoutFollowersDataInput {
  avatar: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  id: Int
  likes: LikeUpdateManyWithoutAuthorInput
  Notification: NotificationUpdateManyWithoutAuthorInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  username: String
}

input UserUpdateWithoutFollowingDataInput {
  avatar: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  id: Int
  likes: LikeUpdateManyWithoutAuthorInput
  Notification: NotificationUpdateManyWithoutAuthorInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  username: String
}

input UserUpdateWithoutLikesDataInput {
  avatar: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  id: Int
  Notification: NotificationUpdateManyWithoutAuthorInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  username: String
}

input UserUpdateWithoutNotificationDataInput {
  avatar: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  id: Int
  likes: LikeUpdateManyWithoutAuthorInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  username: String
}

input UserUpdateWithoutReviewsDataInput {
  avatar: String
  books: BookUpdateManyWithoutAuthorInput
  chapters: ChapterUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  email: String
  favoriteBooks: BookUpdateManyWithoutReadersInput
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  fullname: String
  getStreamToken: String
  givenname: String
  googleId: String
  id: Int
  likes: LikeUpdateManyWithoutAuthorInput
  Notification: NotificationUpdateManyWithoutAuthorInput
  username: String
}

input UserUpdateWithWhereUniqueWithoutFavoriteBooksInput {
  data: UserUpdateWithoutFavoriteBooksDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  data: UserUpdateWithoutFollowersDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  data: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutBooksInput {
  create: UserCreateWithoutBooksInput!
  update: UserUpdateWithoutBooksDataInput!
}

input UserUpsertWithoutChaptersInput {
  create: UserCreateWithoutChaptersInput!
  update: UserUpdateWithoutChaptersDataInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsDataInput!
}

input UserUpsertWithoutLikesInput {
  create: UserCreateWithoutLikesInput!
  update: UserUpdateWithoutLikesDataInput!
}

input UserUpsertWithoutNotificationInput {
  create: UserCreateWithoutNotificationInput!
  update: UserUpdateWithoutNotificationDataInput!
}

input UserUpsertWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  update: UserUpdateWithoutReviewsDataInput!
}

input UserUpsertWithWhereUniqueWithoutFavoriteBooksInput {
  create: UserCreateWithoutFavoriteBooksInput!
  update: UserUpdateWithoutFavoriteBooksDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput!
  update: UserUpdateWithoutFollowersDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  update: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  avatar: NullableStringFilter
  books: BookFilter
  chapters: ChapterFilter
  comments: CommentFilter
  email: NullableStringFilter
  favoriteBooks: BookFilter
  firstname: NullableStringFilter
  followers: UserFilter
  following: UserFilter
  fullname: NullableStringFilter
  getStreamToken: NullableStringFilter
  givenname: NullableStringFilter
  googleId: NullableStringFilter
  id: IntFilter
  likes: LikeFilter
  NOT: [UserWhereInput!]
  Notification: NotificationFilter
  OR: [UserWhereInput!]
  reviews: ReviewFilter
  username: NullableStringFilter
}

input UserWhereUniqueInput {
  email: String
  getStreamToken: String
  googleId: String
  id: Int
  username: String
}
